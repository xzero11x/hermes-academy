---
export interface Props {
  title?: string;
}

const { title = 'Hermes Academy' } = Astro.props;
---

<!doctype html>
<html lang='es'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />

    <!-- Preload critical fonts -->
    <link rel='preconnect' href='https://fonts.googleapis.com' />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
    <link
      href='https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'
      rel='stylesheet'
    />

    <!-- Font Awesome icons -->
    <link
      rel='stylesheet'
      href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css'
      integrity='sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=='
      crossorigin='anonymous'
      referrerpolicy='no-referrer'
    />

    <!-- Meta tags for better SEO and performance -->
    <meta
      name='description'
      content='Plataforma educativa para estudiantes universitarios con tutorías personalizadas'
    />
    <meta name='keywords' content='educación, tutorías, universidad, estudiantes, aprendizaje' />
    <meta name='author' content='Hermes Academy' />
    <meta name='robots' content='index, follow' />

    <!-- Theme color for mobile browsers -->
    <meta name='theme-color' content='#6366f1' />

    <title>{title}</title>
  </head>
  <body>
    <!-- Sistema de autenticación global -->
    <script is:inline>
      // Sistema de Autenticación Global para Hermes Academy
      class GlobalAuthManager {
        constructor() {
          this.usersKey = 'hermesUsers';
          this.sessionKey = 'hermesSession';
          this.initialized = false;

          // Inicializar usuarios demo si no existen
          this.initializeDemoUsers();
        }

        getUsers() {
          const users = localStorage.getItem(this.usersKey);
          return users ? JSON.parse(users) : [];
        }

        saveUsers(users) {
          localStorage.setItem(this.usersKey, JSON.stringify(users));
        }

        getCurrentSession() {
          const session = localStorage.getItem(this.sessionKey);
          return session ? JSON.parse(session) : null;
        }

        saveSession(session) {
          localStorage.setItem(this.sessionKey, JSON.stringify(session));
        }

        isLoggedIn() {
          const session = this.getCurrentSession();
          return session && session.isLoggedIn;
        }

        getCurrentUser() {
          const session = this.getCurrentSession();
          if (!session) return null;

          const users = this.getUsers();
          return users.find(user => user.id === session.userId) || null;
        }

        login(email, password) {
          const users = this.getUsers();
          const user = users.find(u => u.email === email && u.password === password);

          if (!user) {
            return {
              success: false,
              error: 'Email o contraseña incorrectos',
            };
          }

          const session = {
            userId: user.id,
            email: user.email,
            isLoggedIn: true,
            loginAt: new Date().toISOString(),
          };
          this.saveSession(session);

          return {
            success: true,
            user: user,
            session: session,
          };
        }

        register(email, password) {
          const users = this.getUsers();

          if (users.find(user => user.email === email)) {
            return {
              success: false,
              error: 'Este email ya está registrado',
            };
          }

          const newUser = {
            id: Date.now(),
            email: email,
            password: password,
            isProfileComplete: false,
            createdAt: new Date().toISOString(),
            roles: {
              isStudent: true,
              isTutor: false,
              tutorStatus: null,
            },
            tutorProfile: null,
          };

          users.push(newUser);
          this.saveUsers(users);

          const session = {
            userId: newUser.id,
            email: newUser.email,
            isLoggedIn: true,
            loginAt: new Date().toISOString(),
          };
          this.saveSession(session);

          return {
            success: true,
            user: newUser,
            session: session,
          };
        }

        logout() {
          localStorage.removeItem(this.sessionKey);
          return { success: true };
        }

        initializeDemoUsers() {
          if (this.initialized) return;

          const users = this.getUsers();

          const studentExists = users.find(u => u.email === 'juanc4@utec.edu.pe');
          const tutorExists = users.find(u => u.email === 'jorge.ramirez@utec.edu.pe');

          if (!studentExists || !tutorExists) {
            const existingUsers = this.getUsers();
            const allUsers = [...existingUsers];

            if (!tutorExists) {
              allUsers.push({
                id: 2,
                email: 'jorge.ramirez@utec.edu.pe',
                password: 'tutor123',
                isProfileComplete: true,
                createdAt: '2024-01-15T10:00:00.000Z',
                profile: {
                  fullName: 'Jorge Ramírez Silva',
                  university: 'Universidad de Ingeniería y Tecnología',
                  universityId: 1,
                  career: 'Ingeniería de Sistemas',
                  semester: 8,
                  phone: '+51 987654321',
                  studentId: '201901234',
                  completedAt: '2024-01-15T10:30:00.000Z',
                },
                roles: {
                  isStudent: true,
                  isTutor: true,
                  tutorStatus: 'approved',
                },
                tutorProfile: {
                  courses: [
                    {
                      courseId: 3,
                      university: 'Universidad de Ingeniería y Tecnología',
                      courseName: 'Estructuras de Datos',
                      courseCode: 'CS2001',
                      grade: 18,
                      semester: '2023-2',
                      isApproved: true,
                      hourlyRate: 32,
                      description: 'Algoritmos y estructuras de datos fundamentales.',
                    },
                  ],
                  totalSessions: 45,
                  rating: 4.8,
                  description: 'Tutor especializado en Estructuras de Datos.',
                  verificationStatus: 'verified',
                  verifiedAt: '2024-01-15T10:30:00.000Z',
                  availability: {
                    monday: ['14:00-16:00', '18:00-20:00'],
                    tuesday: ['16:00-18:00'],
                    wednesday: ['14:00-16:00', '18:00-20:00'],
                    thursday: ['16:00-18:00'],
                    friday: ['14:00-17:00'],
                    saturday: ['09:00-12:00'],
                    sunday: [],
                  },
                },
              });
            }

            if (!studentExists) {
              allUsers.push({
                id: 1000,
                email: 'juanc4@utec.edu.pe',
                password: 'juanca123',
                isProfileComplete: true,
                createdAt: '2024-02-01T09:00:00.000Z',
                profile: {
                  fullName: 'Juan Carlos Mendoza Rivera',
                  university: 'Universidad de Ingeniería y Tecnología',
                  universityId: 1,
                  career: 'Ingeniería de Sistemas',
                  semester: 4,
                  phone: '+51 912345678',
                  studentId: '202011567',
                  learningGoals: 'Matemáticas, Programación, Estructuras de Datos',
                  completedAt: '2024-02-01T09:30:00.000Z',
                },
                roles: {
                  isStudent: true,
                  isTutor: false,
                  tutorStatus: null,
                },
                tutorProfile: null,
                scheduledTutorings: [
                  {
                    id: 'TUT001',
                    tutorId: 2,
                    tutorName: 'Jorge Ramírez Silva',
                    courseId: 3,
                    courseName: 'Estructuras de Datos',
                    courseCode: 'CS2001',
                    date: '2025-07-08',
                    time: '14:00',
                    duration: 60,
                    price: 32,
                    status: 'confirmed',
                    sessionType: 'online',
                    meetingLink: 'https://hermes-academy.com/room/TUT001',
                    confirmedAt: '2025-07-02T10:00:00.000Z',
                  },
                  {
                    id: 'TUT002',
                    tutorId: 2,
                    tutorName: 'Jorge Ramírez Silva',
                    courseId: 3,
                    courseName: 'Estructuras de Datos',
                    courseCode: 'CS2001',
                    date: '2025-07-10',
                    time: '16:00',
                    duration: 60,
                    price: 32,
                    status: 'confirmed',
                    sessionType: 'online',
                    meetingLink: 'https://hermes-academy.com/room/TUT002',
                    confirmedAt: '2025-07-03T14:00:00.000Z',
                  },
                ],
              });
            }

            this.saveUsers(allUsers);
          }

          this.initialized = true;
        }

        debug() {
          console.log('=== DEBUG AUTH GLOBAL ===');
          console.log('hermesSession:', localStorage.getItem('hermesSession'));
          console.log('hermesUsers:', localStorage.getItem('hermesUsers'));
          console.log('Usuario actual:', this.getCurrentUser());
          console.log('Está logueado:', this.isLoggedIn());
          console.log('========================');
        }
      }

      // Crear instancia global única
      if (!window.hermesAuth) {
        window.hermesAuth = new GlobalAuthManager();
      }

      // Mantener compatibilidad con window.auth
      window.auth = window.hermesAuth;

      // Función global de depuración
      window.debugAuth = function () {
        window.hermesAuth.debug();
      };

      // Función para limpiar caché problemático
      window.clearAuthCache = function () {
        console.log('Limpiando caché de autenticación...');
        localStorage.removeItem('hermesSession');
        sessionStorage.clear();
        location.reload();
      };

      // Función para forzar reinicialización de usuarios demo
      window.resetDemoUsers = function () {
        console.log('Reinicializando usuarios demo...');
        localStorage.removeItem('hermesUsers');
        localStorage.removeItem('hermesSession');
        window.hermesAuth.initialized = false;
        window.hermesAuth.initializeDemoUsers();
        location.reload();
      };

      console.log('Sistema de autenticación global cargado');
      console.log('Funciones de depuración disponibles: debugAuth(), clearAuthCache(), resetDemoUsers()');
      console.log('Funciones del dashboard: debugRequests(), createTestRequest(), clearInvalidRequests()');
    </script>

    <!-- Sistema de gestión de solicitudes de tutoría -->
    <script is:inline>
      // TutoringRequestManager - Sistema de gestión de solicitudes de tutoría

      // Función para obtener el nombre del curso por ID
      function getCourseName(courseId) {
        const courses = [
          { id: 1, name: 'Cálculo de una Variable' },
          { id: 2, name: 'Álgebra Lineal' },
          { id: 3, name: 'Química General' },
          { id: 4, name: 'Física I' },
          { id: 5, name: 'Estadística' },
          { id: 6, name: 'Programación I' },
          { id: 7, name: 'Microeconomía' },
          { id: 8, name: 'Contabilidad Financiera' },
          { id: 9, name: 'Derecho Civil' },
          { id: 10, name: 'Anatomía Humana' },
        ];

        // Convertir ambos a string para comparación
        const course = courses.find(c => String(c.id) === String(courseId));
        return course ? course.name : `Curso ${courseId}`;
      }

      class TutoringRequestManager {
        constructor() {
          this.requests = this.loadRequests();
          console.log('TutoringRequestManager inicializado');
        }

        loadRequests() {
          try {
            const stored = localStorage.getItem('hermesTutoringRequests');
            return stored ? JSON.parse(stored) : [];
          } catch (error) {
            console.error('Error cargando solicitudes:', error);
            return [];
          }
        }

        saveRequests() {
          try {
            localStorage.setItem('hermesTutoringRequests', JSON.stringify(this.requests));
            console.log('Solicitudes guardadas:', this.requests.length);
          } catch (error) {
            console.error('Error guardando solicitudes:', error);
          }
        }

        sendTutoringRequest(studentId, tutorId, courseId, requestData) {
          try {
            console.log('Enviando solicitud de tutoría:', { studentId, tutorId, courseId, requestData });

            const newRequest = {
              id: Date.now() + Math.random(),
              studentId: parseInt(studentId),
              tutorId: parseInt(tutorId),
              courseId: parseInt(courseId),
              courseName: getCourseName(courseId),
              status: 'pending',
              createdAt: new Date().toISOString(),
              studentOfferedPrice: requestData.offeredPrice || 30,
              message: requestData.message || '',
              studentName: requestData.studentName || 'Estudiante',
              courseCode: requestData.courseCode || '',
              // Guardar múltiples sesiones en una sola solicitud
              scheduledSessions: requestData.scheduledSessions || [],
              // Fallback para compatibilidad con dashboard actual (primer horario)
              sessionDay: requestData.scheduledSessions?.[0]?.day || requestData.sessionDate || 'No especificado',
              sessionTime: requestData.scheduledSessions?.[0]?.time || requestData.sessionTime || 'No especificado',
              duration: requestData.scheduledSessions?.[0]?.duration || requestData.duration || 60,
            };

            this.requests.push(newRequest);
            this.saveRequests();

            console.log('Solicitud creada exitosamente:', newRequest);

            // Disparar evento personalizado para notificar a otros componentes
            window.dispatchEvent(
              new CustomEvent('tutoringRequestSent', {
                detail: { request: newRequest },
              })
            );

            return { success: true, requestId: newRequest.id };
          } catch (error) {
            console.error('Error enviando solicitud:', error);
            return { success: false, error: error.message };
          }
        }

        getRequestsForStudent(studentId) {
          return this.requests.filter(request => request.studentId === parseInt(studentId));
        }

        getRequestsForTutor(tutorId) {
          return this.requests.filter(request => request.tutorId === parseInt(tutorId));
        }

        updateRequestStatus(requestId, newStatus) {
          const request = this.requests.find(r => r.id === requestId);
          if (request) {
            request.status = newStatus;
            request.updatedAt = new Date().toISOString();
            this.saveRequests();

            // Disparar evento de actualización
            window.dispatchEvent(
              new CustomEvent('tutoringRequestUpdated', {
                detail: { request, oldStatus: request.status, newStatus },
              })
            );

            return true;
          }
          return false;
        }

        getAllRequests() {
          return this.requests;
        }

        deleteRequest(requestId) {
          const index = this.requests.findIndex(r => r.id === requestId);
          if (index !== -1) {
            const deletedRequest = this.requests.splice(index, 1)[0];
            this.saveRequests();

            // Disparar evento de eliminación
            window.dispatchEvent(
              new CustomEvent('tutoringRequestDeleted', {
                detail: { request: deletedRequest },
              })
            );

            return true;
          }
          return false;
        }

        // Función de depuración
        debug() {
          console.log('=== DEBUG TUTORING REQUESTS ===');
          console.log('Total de solicitudes:', this.requests.length);
          console.log('Solicitudes:', this.requests);
          console.log('===============================');
        }

        // Limpiar solicitudes inválidas
        cleanInvalidRequests() {
          const validRequests = this.requests.filter(
            request => request.studentId && request.tutorId && request.courseId && request.status
          );

          if (validRequests.length !== this.requests.length) {
            console.log(`Limpiando ${this.requests.length - validRequests.length} solicitudes inválidas`);
            this.requests = validRequests;
            this.saveRequests();
          }
        }
      }

      // Crear instancia global
      if (!window.tutoringRequestManager) {
        window.tutoringRequestManager = new TutoringRequestManager();
      }

      // Funciones globales de depuración
      window.debugRequests = function () {
        window.tutoringRequestManager.debug();
      };

      window.clearInvalidRequests = function () {
        window.tutoringRequestManager.cleanInvalidRequests();
      };

      window.createTestRequest = function () {
        const testRequest = window.tutoringRequestManager.sendTutoringRequest(1, 2, 1, {
          offeredPrice: 35,
          sessionDate: 'Lunes',
          sessionTime: '15:00',
          duration: 60,
          message: 'Solicitud de prueba',
          studentName: 'Estudiante de Prueba',
          courseCode: 'CALC001',
        });
        console.log('Solicitud de prueba creada:', testRequest);
      };

      console.log('Sistema de solicitudes de tutoría cargado');
    </script>

    <slot />
  </body>
</html>

<style is:global>
  /* CSS básico para la simulación */
  @import '../styles/global.css';
</style>
