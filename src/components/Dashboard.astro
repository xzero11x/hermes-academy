---
// Los datos reales del usuario se obtendrán vía JavaScript en el cliente
// Por ahora solo definimos la estructura
---

<section class='dashboard-section'>
  <div class='container'>
    <!-- Header compacto -->
    <div class='dashboard-header'>
      <div class='user-welcome'>
        <div class='user-avatar'>
          <i class='fas fa-user'></i>
          <!-- Badge de tutor verificado -->
          <div class='tutor-verified-badge' id='tutorBadge' style='display: none;'>
            <i class='fas fa-shield-check'></i>
          </div>
        </div>
        <div class='user-info'>
          <h1 class='user-name' id='userName'>¡Hola, Usuario!</h1>
          <p class='user-university' id='userUniversity'>Universidad</p>
          <!-- Badge de texto para tutor -->
          <span class='tutor-status-text' id='tutorStatusText' style='display: none;'>
            <i class='fas fa-chalkboard-teacher'></i>
            Tutor Verificado
          </span>
        </div>
      </div>

      <!-- Botón aplicar como tutor (solo visible para estudiantes no tutores) -->
      <div class='header-actions'>
        <button class='apply-tutor-btn' id='applyTutorBtn' style='display: none;'>
          <i class='fas fa-chalkboard-teacher'></i>
          Aplicar como tutor
        </button>
      </div>
    </div>

    <!-- Grid principal dividido -->
    <div class='dashboard-main-grid' id='dashboardMainGrid'>
      <!-- Columna Estudiante (Izquierda) -->
      <div class='student-column' id='studentColumn'>
        <div class='column-header' id='studentColumnHeader'>
          <h3><i class='fas fa-user-graduate'></i> Panel Estudiante</h3>
        </div>

        <!-- Container especial para layout solo estudiante -->
        <div class='student-only-container' id='studentOnlyContainer' style='display: none;'>
          <div class='student-top-row'>
            <!-- Próximas tutorías -->
            <div class='dashboard-card tutorials-card'>
              <div class='card-header'>
                <h2><i class='fas fa-clock'></i> Próximas tutorías</h2>
                <span class='count-badge' id='tutorialsCount'>0</span>
              </div>
              <div
                class='tutorials-list'
                id='tutorialsList'
                style='display: flex; flex-direction: column; gap: 0.5rem; padding: 0;'
              >
                <div
                  class='empty-state'
                  style='background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 0.75rem; text-align: center;'
                >
                  <i class='fas fa-calendar-plus' style='font-size: 1.5rem; color: #cbd5e1; margin-bottom: 0.25rem;'>
                  </i>
                  <p style='margin: 0 0 0.5rem 0; color: #64748b; font-size: 0.75rem;'>
                    No tienes tutorías programadas
                  </p>
                  <a
                    href='#'
                    onclick='goToMyCourses()'
                    class='compact-search-btn'
                    style='background: #8b5cf6; color: white; padding: 0.125rem 0.5rem; border-radius: 4px; text-decoration: none; font-size: 0.8rem; display: inline-block; line-height: 1.2;'
                  >
                    Buscar Cursos
                  </a>
                </div>
              </div>
            </div>

            <!-- Solicitudes Pendientes -->
            <div class='dashboard-card requests-card'>
              <div class='card-header'>
                <h2><i class='fas fa-hourglass-half'></i> Solicitudes Pendientes</h2>
                <span class='count-badge' id='requestsCount'>0</span>
              </div>
              <div
                class='requests-list'
                id='requestsList'
                style='display: flex; flex-direction: column; gap: 0.5rem; padding: 0;'
              >
                <div
                  class='empty-state'
                  style='background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 1rem; text-align: center;'
                >
                  <i class='fas fa-envelope' style='font-size: 1.5rem; color: #cbd5e1; margin-bottom: 0.25rem;'></i>
                  <p style='margin: 0; color: #64748b; font-size: 0.75rem;'>No tienes solicitudes pendientes</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Accesos rápidos (fila completa) -->
          <div class='dashboard-card actions-card student-actions-full'>
            <div class='card-header'>
              <h2><i class='fas fa-rocket'></i> Accesos rápidos</h2>
            </div>
            <div class='actions-grid'>
              <a href='#' onclick='goToMyCourses()' class='action-btn'>
                <i class='fas fa-search'></i>
                <span>Cursos</span>
              </a>
              <a href={import.meta.env.BASE_URL + '/universities'} class='action-btn'>
                <i class='fas fa-university'></i>
                <span>Universidades</span>
              </a>
            </div>
          </div>
        </div>

        <!-- Layout original para modo tutor (se oculta en modo solo estudiante) -->
        <div class='student-column-original' id='studentColumnOriginal'>
          <!-- Próximas tutorías -->
          <div class='dashboard-card tutorials-card'>
            <div class='card-header'>
              <h2><i class='fas fa-clock'></i> Próximas tutorías</h2>
              <span class='count-badge' id='tutorialsCount2'>0</span>
            </div>
            <div
              class='tutorials-list'
              id='tutorialsList2'
              style='display: flex; flex-direction: column; gap: 0.5rem; padding: 0;'
            >
              <div
                class='empty-state'
                style='background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 0.75rem; text-align: center;'
              >
                <i class='fas fa-calendar-plus' style='font-size: 1.5rem; color: #cbd5e1; margin-bottom: 0.25rem;'></i>
                <p style='margin: 0 0 0.5rem 0; color: #64748b; font-size: 0.75rem;'>No tienes tutorías programadas</p>
                <a
                  href='#'
                  onclick='goToMyCourses()'
                  class='compact-search-btn'
                  style='background: #8b5cf6; color: white; padding: 0.125rem 0.5rem; border-radius: 4px; text-decoration: none; font-size: 0.8rem; display: inline-block; line-height: 1.2;'
                >
                  Buscar Cursos
                </a>
              </div>
            </div>
          </div>

          <!-- Solicitudes Pendientes -->
          <div class='dashboard-card requests-card'>
            <div class='card-header'>
              <h2><i class='fas fa-hourglass-half'></i> Solicitudes Pendientes</h2>
              <span class='count-badge' id='requestsCount2'>0</span>
            </div>
            <div
              class='requests-list'
              id='requestsList2'
              style='display: flex; flex-direction: column; gap: 0.5rem; padding: 0;'
            >
              <div
                class='empty-state'
                style='background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 1rem; text-align: center;'
              >
                <i class='fas fa-envelope' style='font-size: 1.5rem; color: #cbd5e1; margin-bottom: 0.25rem;'></i>
                <p style='margin: 0; color: #64748b; font-size: 0.75rem;'>No tienes solicitudes pendientes</p>
              </div>
            </div>
          </div>

          <!-- Accesos rápidos estudiante -->
          <div class='dashboard-card actions-card'>
            <div class='card-header'>
              <h2><i class='fas fa-rocket'></i> Accesos rápidos</h2>
            </div>
            <div class='actions-grid'>
              <a href='#' onclick='goToMyCourses()' class='action-btn'>
                <i class='fas fa-search'></i>
                <span>Cursos</span>
              </a>
              <a href={import.meta.env.BASE_URL + '/universities'} class='action-btn'>
                <i class='fas fa-university'></i>
                <span>Universidades</span>
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Columna Tutor (Derecha) -->
      <div class='tutor-column' id='tutorColumn' style='display: none;'>
        <div class='column-header'>
          <h3><i class='fas fa-chalkboard-teacher'></i> Panel Tutor</h3>
          <span class='tutor-badge' id='tutorStatus'>Verificado</span>
        </div>

        <!-- Información del curso que enseña -->
        <div class='dashboard-card tutor-course-card'>
          <div class='card-header'>
            <h2><i class='fas fa-book'></i> Mi Curso</h2>
          </div>
          <div class='tutor-course-info' id='tutorCourseInfo'>
            <div class='course-item'>
              <i class='fas fa-code'></i>
              <div class='course-details'>
                <span class='course-name' id='tutorCourseName'>-</span>
                <span class='course-code' id='tutorCourseCode'>-</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Solicitudes Entrantes del Tutor -->
        <div class='dashboard-card tutor-requests-card'>
          <div class='card-header'>
            <h2><i class='fas fa-inbox'></i> Solicitudes Entrantes</h2>
            <span class='count-badge tutor-count-badge' id='tutorRequestsCount'>0</span>
          </div>
          <div class='tutor-requests-list' id='tutorRequestsList'>
            <div class='empty-state'>
              <i class='fas fa-inbox-in'></i>
              <p>No hay solicitudes pendientes</p>
            </div>
          </div>
        </div>

        <!-- Estadísticas del tutor -->
        <div class='dashboard-card tutor-stats-card'>
          <div class='card-header'>
            <h2><i class='fas fa-chart-bar'></i> Estadísticas</h2>
          </div>
          <div class='tutor-stats'>
            <div class='tutor-stat'>
              <i class='fas fa-star stat-icon'></i>
              <span class='stat-number' id='tutorRating'>4.8</span>
              <span class='stat-label'>Rating</span>
            </div>
            <div class='tutor-stat'>
              <i class='fas fa-users stat-icon'></i>
              <span class='stat-number' id='tutorSessions'>27</span>
              <span class='stat-label'>Sesiones</span>
            </div>
            <div class='tutor-stat'>
              <i class='fas fa-book-open stat-icon'></i>
              <span class='stat-number' id='tutorCourses'>1</span>
              <span class='stat-label'>Cursos</span>
            </div>
          </div>
        </div>

        <!-- Disponibilidad -->
        <div class='dashboard-card availability-card'>
          <div class='card-header'>
            <h2><i class='fas fa-calendar'></i> Horarios Disponibles</h2>
            <button class='settings-btn' onclick='manageCourses()' title='Gestionar horarios'>
              <i class='fas fa-cog'></i>
            </button>
          </div>
          <div class='availability-tags'>
            <span class='availability-tag'><i class='fas fa-clock'></i> Lun: 14:00-16:00</span>
            <span class='availability-tag'><i class='fas fa-clock'></i> Mié: 18:00-20:00</span>
            <span class='availability-tag'><i class='fas fa-clock'></i> Sáb: 09:00-12:00</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ baseUrl: import.meta.env.BASE_URL }}>
  // Sistema de autenticación - usa el global del Layout

  // Crear instancia global (usa el auth global)
  // window.auth ya está disponible desde el Layout

  // Asegurar que existen usuarios demo
  function ensureDemoUsers() {
    if (!window.auth) return false;
    const users = window.auth.getUsers();
    if (users.length === 0) {
      // Redirigir a la página principal para inicializar datos
      window.location.href = baseUrl + '/';
      return false;
    }
    return true;
  }

  // Cargar datos del usuario al cargar la página
  document.addEventListener('DOMContentLoaded', function () {
    // Esperar a que el auth global esté disponible
    setTimeout(() => {
      loadUserData();
    }, 100);
  });
  function loadUserData() {
    // Asegurar que existen usuarios demo
    if (!ensureDemoUsers()) {
      return;
    }

    const user = window.auth.getCurrentUser();

    if (!user) {
      window.location.href = `${baseUrl}/auth`;
      return;
    }

    // Actualizar nombre del usuario
    const userName = document.getElementById('userName');
    if (userName) {
      userName.textContent = user.profile ? `¡Hola, ${user.profile.fullName}!` : `¡Hola, ${user.email}!`;
    }

    // Actualizar universidad
    const userUniversity = document.getElementById('userUniversity');
    if (userUniversity && user.profile && user.profile.university) {
      userUniversity.textContent = user.profile.university;
    }

    // Cargar tutorías programadas del estudiante
    loadScheduledTutorings(user);

    // Cargar solicitudes pendientes del estudiante
    loadPendingRequests(user);

    // Mostrar módulo tutor si corresponde
    if (user.roles && user.roles.isTutor) {
      showTutorModule(user);
      loadTutorRequests(user);
      // Usar layout de tutor (2 columnas)
      setTutorLayout();
    } else {
      // Si no es tutor, mostrar botón de aplicar como tutor
      showApplyTutorButton();
      // Usar layout solo estudiante (reorganizado)
      setStudentOnlyLayout();
    }
  }

  function loadScheduledTutorings(user) {
    console.log('loadScheduledTutorings called with user:', user);
    console.log('User scheduledTutorings:', user.scheduledTutorings);

    const tutorialsList = document.getElementById('tutorialsList');
    const tutorialsCount = document.getElementById('tutorialsCount');
    const tutorialsList2 = document.getElementById('tutorialsList2');
    const tutorialsCount2 = document.getElementById('tutorialsCount2');

    if (!user.scheduledTutorings || user.scheduledTutorings.length === 0) {
      console.log('No scheduled tutorings found');
      // Actualizar contadores a 0
      if (tutorialsCount) tutorialsCount.textContent = '0';
      if (tutorialsCount2) tutorialsCount2.textContent = '0';
      return; // Mantener el estado vacío por defecto con botones visibles
    }

    // Actualizar contadores
    if (tutorialsCount) tutorialsCount.textContent = user.scheduledTutorings.length;
    if (tutorialsCount2) tutorialsCount2.textContent = user.scheduledTutorings.length;
    console.log('Updated tutorials count to:', user.scheduledTutorings.length);

    // Función para crear el HTML de una tutoría
    function createTutorialHTML(tutoring, index) {
      const date = new Date(tutoring.date);
      const dateStr = date.toLocaleDateString('es-PE', {
        weekday: 'short',
        day: 'numeric',
        month: 'short',
      });

      const tutorialItem = document.createElement('div');
      tutorialItem.className = 'tutorial-item';
      tutorialItem.style.cssText =
        'background: white; border: 1px solid #e2e8f0; border-radius: 5px; padding: 0.5rem; margin-bottom: 0.25rem;';

      tutorialItem.innerHTML = `
        <div class="tutorial-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.25rem;">
          <h4 class="tutorial-course" style="font-size: 0.875rem; font-weight: 600; color: #1e293b; margin: 0;">${tutoring.courseName}</h4>
          <span class="status-badge ${tutoring.status}" style="padding: 0.125rem 0.375rem; border-radius: 3px; font-size: 0.625rem; font-weight: 500; ${tutoring.status === 'confirmed' ? 'background: #dcfce7; color: #166534;' : 'background: #fef3c7; color: #d97706;'}">${tutoring.status === 'confirmed' ? 'Confirmada' : tutoring.status}</span>
        </div>
        <p class="tutorial-tutor" style="font-size: 0.75rem; color: #64748b; margin: 0 0 0.25rem 0;">Tutor: ${tutoring.tutorName}</p>
        <div class="tutorial-schedule" style="display: flex; align-items: center; gap: 1rem; margin-bottom: 0.25rem;">
          <div class="schedule-item" style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-calendar" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>${dateStr}</span>
          </div>
          <div class="schedule-item" style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-clock" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>${tutoring.time} (${tutoring.duration}m)</span>
          </div>
        </div>
        <div class="tutorial-actions" style="display: flex; justify-content: flex-end;">
          <button class="btn-action btn-primary" onclick="joinTutoringSession('${tutoring.id}')" style="padding: 0.25rem 0.5rem; border: none; border-radius: 3px; font-size: 0.75rem; font-weight: 500; cursor: pointer; background: #6366f1; color: white;">
            <i class="fas fa-play" style="color: white; font-size: 0.625rem; margin-right: 0.25rem;"></i>
            Ingresar
          </button>
        </div>
      `;
      return tutorialItem;
    }

    // Limpiar ambas listas y agregar tutorías
    if (tutorialsList) {
      tutorialsList.innerHTML = '';
      user.scheduledTutorings.forEach((tutoring, index) => {
        const tutorialItem = createTutorialHTML(tutoring, index);
        tutorialsList.appendChild(tutorialItem);
      });
      console.log('Updated tutorialsList with tutorings');
    }

    if (tutorialsList2) {
      tutorialsList2.innerHTML = '';
      user.scheduledTutorings.forEach((tutoring, index) => {
        const tutorialItem = createTutorialHTML(tutoring, index);
        tutorialsList2.appendChild(tutorialItem);
      });
      console.log('Updated tutorialsList2 with tutorings');
    }

    console.log('Finished rendering all tutorings');
  }

  function loadPendingRequests(user) {
    console.log('loadPendingRequests called with user:', user);

    // Obtener solicitudes del localStorage
    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    console.log('All requests:', requests);

    // Filtrar solicitudes del usuario actual que estén pendientes
    const userRequests = requests.filter(
      req => req.studentId === user.id && (req.status === 'pending' || req.status === 'counter_offer')
    );

    console.log('User pending requests:', userRequests);

    const requestsList = document.getElementById('requestsList');
    const requestsCount = document.getElementById('requestsCount');

    if (!requestsList || !requestsCount) return;

    if (userRequests.length === 0) {
      requestsCount.textContent = '0';
      return; // Mantener el estado vacío por defecto
    }

    // Actualizar contador
    requestsCount.textContent = userRequests.length;

    // Limpiar lista y agregar solicitudes
    requestsList.innerHTML = '';

    userRequests.forEach((request, index) => {
      console.log(`Rendering request ${index}:`, request);
      const requestItem = document.createElement('div');
      requestItem.style.cssText =
        'padding: 0.5rem; background: white; border-radius: 5px; border: 1px solid #e2e8f0; margin-bottom: 0.25rem;';

      // Obtener información del curso y tutor
      const courseName = request.courseName || getCourseName(request.courseId);
      const tutorName = getTutorName(request.tutorId);

      // Determinar estado y color
      let statusClass = 'pending';
      let statusText = 'Pendiente';
      let statusStyles = 'background: #fef3c7; color: #d97706;';
      if (request.status === 'counter_offer') {
        statusClass = 'counter_offer';
        statusText = 'Contraoferta';
        statusStyles = 'background: #dbeafe; color: #2563eb;';
      }

      // Crear lista de sesiones programadas
      const sessionsHtml = request.scheduledSessions
        ? request.scheduledSessions
            .map(
              session =>
                `<div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b; margin-bottom: 0.125rem;">
            <i class="fas fa-calendar" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>${session.day} ${session.time} - ${session.endTime}</span>
          </div>`
            )
            .join('')
        : `<div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-calendar" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>${request.sessionDay} ${request.sessionTime}</span>
          </div>`;

      const sessionsCount = request.scheduledSessions ? request.scheduledSessions.length : 1;

      requestItem.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.25rem;">
          <div>
            <div style="font-size: 0.875rem; font-weight: 600; color: #1e293b; margin: 0;">${courseName}</div>
            <div style="font-size: 0.75rem; color: #64748b; margin: 0;">Tutor: ${tutorName}</div>
          </div>
          <span style="padding: 0.125rem 0.375rem; border-radius: 3px; font-size: 0.625rem; font-weight: 500; ${statusStyles}">${statusText}</span>
        </div>
        <div style="display: flex; flex-direction: column; gap: 0.25rem;">
          <div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b; margin-bottom: 0.25rem;">
            <i class="fas fa-clock" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>${sessionsCount} sesión(es) programada(s)</span>
          </div>
          ${sessionsHtml}
          <div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-dollar-sign" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>S/ ${request.studentOfferedPrice}/hora</span>
          </div>
          ${
            request.status === 'counter_offer' && request.tutorCounterPrice
              ? `
          <div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-handshake" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>Contraoferta: S/ ${request.tutorCounterPrice}/hora</span>
          </div>
          <div style="display: flex; gap: 0.5rem; margin-top: 0.75rem; flex-wrap: wrap;">
            <button class="student-action-btn accept" onclick="acceptCounterOffer('${request.id}')" style="background: #dcfce7; color: #166534; border: 1px solid #bbf7d0; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.75rem; cursor: pointer; transition: all 0.2s;">
              <i class="fas fa-check"></i> Aceptar
            </button>
            <button class="student-action-btn counter" onclick="openStudentCounterModal('${request.id}', ${request.tutorCounterPrice})" style="background: #fef3c7; color: #92400e; border: 1px solid #fde68a; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.75rem; cursor: pointer; transition: all 0.2s;">
              <i class="fas fa-handshake"></i> Contraoferta
            </button>
            <button class="student-action-btn reject" onclick="rejectCounterOffer('${request.id}')" style="background: #fee2e2; color: #991b1b; border: 1px solid #fecaca; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.75rem; cursor: pointer; transition: all 0.2s;">
              <i class="fas fa-times"></i> Rechazar
            </button>
          </div>
          `
              : ''
          }
        </div>
      `;

      requestsList.appendChild(requestItem);
      console.log(`Added request item ${index} to the list`);
    });

    console.log('Finished rendering all pending requests');
  }

  // Funciones auxiliares para obtener nombres de curso y tutor
  function getCourseName(courseId) {
    // Verificar si courseId es válido
    if (!courseId && courseId !== 0) {
      console.warn('courseId is null, undefined or invalid:', courseId);
      return 'Curso no especificado';
    }

    // Datos de cursos (versión simplificada para el frontend - UTEC)
    const courses = [
      { id: 1, name: 'Cálculo de una Variable' },
      { id: 2, name: 'Introducción a la Mecánica' },
      { id: 3, name: 'Química General' },
      { id: 18, name: 'Ecuaciones Diferenciales' },
    ];

    const course = courses.find(c => c.id.toString() === courseId.toString());
    return course ? course.name : `Curso ID: ${courseId}`;
  }

  function getTutorName(tutorId) {
    // Verificar si tutorId es válido
    if (!tutorId && tutorId !== 0) {
      console.warn('tutorId is null, undefined or invalid:', tutorId);
      return 'Tutor no especificado';
    }

    // Datos de tutores (versión simplificada para el frontend)
    const tutors = [
      { id: 1, name: 'María Elena González Vargas' },
      { id: 2, name: 'Jorge Ramírez Silva' },
      { id: 3, name: 'Carlos Alberto Mendoza Torres' },
      { id: 4, name: 'Ana Patricia Flores Castillo' },
      { id: 5, name: 'Luis Fernando Castro Delgado' },
    ];

    const tutor = tutors.find(t => t.id.toString() === tutorId.toString());
    return tutor ? tutor.name : `Tutor ID: ${tutorId}`;
  }

  // Función global para depurar solicitudes
  window.debugRequests = function () {
    console.log('=== DEBUG SOLICITUDES ===');
    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    console.log('Total requests:', requests.length);
    console.log('Requests:', requests);

    const user = window.auth?.getCurrentUser();
    console.log('Current user:', user);

    if (user) {
      const userRequests = requests.filter(
        req => req.studentId === user.id && (req.status === 'pending' || req.status === 'counter_offer')
      );
      console.log('User pending requests:', userRequests);
    }
    console.log('========================');
  };

  // Función global para crear solicitud de prueba
  window.createTestRequest = function () {
    const user = window.auth?.getCurrentUser();
    if (!user) {
      console.log('No hay usuario logueado');
      return;
    }

    const testRequest = {
      id: 'REQ_TEST_' + Date.now(),
      studentId: user.id,
      tutorId: 2, // Jorge Ramírez Silva
      courseId: 3, // Química General
      studentOfferedPrice: 35,
      sessionDay: 'Lunes',
      sessionTime: '14:00',
      sessionEndTime: '15:00',
      duration: 60,
      status: 'pending',
      message: 'Solicitud de prueba para verificar el sistema',
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
    };

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    requests.push(testRequest);
    localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

    console.log('Solicitud de prueba creada:', testRequest);

    // Recargar datos
    loadUserData();
  };

  // Función para limpiar solicitudes problemáticas
  window.clearInvalidRequests = function () {
    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const validRequests = requests.filter(
      req => req.tutorId != null && req.courseId != null && req.studentId != null && req.status
    );

    console.log('Solicitudes antes:', requests.length);
    console.log('Solicitudes válidas:', validRequests.length);

    localStorage.setItem('hermesTutoringRequests', JSON.stringify(validRequests));

    // Recargar datos
    loadUserData();

    console.log('Solicitudes inválidas eliminadas');
  };

  // Función para cargar solicitudes entrantes del tutor
  function loadTutorRequests(user) {
    console.log('loadTutorRequests called with user:', user);

    // Obtener solicitudes del localStorage
    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    console.log('All requests for tutor check:', requests);

    // Filtrar solicitudes dirigidas a este tutor que estén pendientes
    const tutorRequests = requests.filter(req => req.tutorId === user.id && req.status === 'pending');

    console.log('Tutor incoming requests:', tutorRequests);

    const tutorRequestsList = document.getElementById('tutorRequestsList');
    const tutorRequestsCount = document.getElementById('tutorRequestsCount');

    if (!tutorRequestsList || !tutorRequestsCount) return;

    if (tutorRequests.length === 0) {
      tutorRequestsCount.textContent = '0';
      return; // Mantener el estado vacío por defecto
    }

    // Actualizar contador
    tutorRequestsCount.textContent = tutorRequests.length;

    // Limpiar lista y agregar solicitudes
    tutorRequestsList.innerHTML = '';

    tutorRequests.forEach((request, index) => {
      console.log(`Rendering tutor request ${index}:`, request);
      const requestItem = document.createElement('div');
      requestItem.className = 'tutor-request-item';

      // Obtener información del curso y estudiante
      const courseName = request.courseName || getCourseName(request.courseId);
      const studentName = getStudentName(request.studentId);

      // Crear lista de sesiones programadas (igual que en el panel del estudiante)
      const sessionsHtml = request.scheduledSessions
        ? request.scheduledSessions
            .map(
              session =>
                `<div class="tutor-request-detail-item">
            <i class="fas fa-calendar"></i>
            <span>${session.day} ${session.time} - ${session.endTime || (session.time.split(':')[0] && String(parseInt(session.time.split(':')[0]) + 1).padStart(2, '0') + ':00') || 'N/A'}</span>
          </div>`
            )
            .join('')
        : `<div class="tutor-request-detail-item">
            <i class="fas fa-calendar"></i>
            <span>${request.sessionDay} ${request.sessionTime}</span>
          </div>`;

      const sessionsCount = request.scheduledSessions ? request.scheduledSessions.length : 1;

      requestItem.innerHTML = `
        <div class="tutor-request-header">
          <div>
            <div class="tutor-request-course">${courseName}</div>
            <div class="tutor-request-student">Estudiante: ${studentName}</div>
            <div class="tutor-request-sessions-count">${sessionsCount} sesión(es) solicitada(s)</div>
          </div>
          <span class="tutor-request-price">S/ ${request.studentOfferedPrice}/h</span>
        </div>
        <div class="tutor-request-details">
          ${sessionsHtml}
          ${
            request.message
              ? `
          <div class="tutor-request-detail-item">
            <i class="fas fa-comment"></i>
            <span>${request.message}</span>
          </div>
          `
              : ''
          }
          <div class="tutor-request-detail-item">
            <i class="fas fa-calculator"></i>
            <span>Total estimado: S/ ${(request.studentOfferedPrice || 0) * sessionsCount}</span>
          </div>
        </div>
        <div class="tutor-request-actions">
          <button class="tutor-action-btn accept" onclick="acceptRequest('${request.id}')">
            <i class="fas fa-check"></i>
            Aceptar
          </button>
          <button class="tutor-action-btn counter" onclick="counterOffer('${request.id}')">
            <i class="fas fa-handshake"></i>
            Contraoferta
          </button>
          <button class="tutor-action-btn reject" onclick="rejectRequest('${request.id}')">
            <i class="fas fa-times"></i>
            Rechazar
          </button>
        </div>
      `;

      tutorRequestsList.appendChild(requestItem);
      console.log(`Added tutor request item ${index} to the list`);
    });

    console.log('Finished rendering all tutor requests');
  }

  // Función auxiliar para obtener nombre del estudiante
  function getStudentName(studentId) {
    // Verificar si studentId es válido
    if (!studentId && studentId !== 0) {
      console.warn('studentId is null, undefined or invalid:', studentId);
      return 'Estudiante no especificado';
    }

    // Por ahora usamos el sistema de autenticación para obtener el nombre
    const users = window.auth?.getUsers() || [];
    const student = users.find(u => u.id === studentId);

    if (student && student.profile && student.profile.fullName) {
      return student.profile.fullName;
    } else if (student && student.email) {
      return student.email.split('@')[0]; // Usar parte del email como nombre
    }

    return `Estudiante ID: ${studentId}`;
  }

  // Funciones para gestionar solicitudes del tutor
  window.acceptRequest = function (requestId) {
    console.log('Accepting request:', requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const requestIndex = requests.findIndex(req => req.id === requestId);

    if (requestIndex !== -1) {
      requests[requestIndex].status = 'accepted';
      requests[requestIndex].lastUpdated = new Date().toISOString();

      localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

      // Crear notificación para el estudiante
      createNotificationForStudent(requests[requestIndex], 'accepted');

      alert('Solicitud aceptada exitosamente');
      loadUserData(); // Recargar datos
    }
  };

  window.rejectRequest = function (requestId) {
    console.log('Rejecting request:', requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const requestIndex = requests.findIndex(req => req.id === requestId);

    if (requestIndex !== -1) {
      requests[requestIndex].status = 'rejected';
      requests[requestIndex].lastUpdated = new Date().toISOString();

      localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

      // Crear notificación para el estudiante
      createNotificationForStudent(requests[requestIndex], 'rejected');

      alert('Solicitud rechazada');
      loadUserData(); // Recargar datos
    }
  };
  window.counterOffer = function (requestId) {
    console.log('Opening counter offer for request:', requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const request = requests.find(req => req.id === requestId);

    if (!request) {
      alert('Error: No se encontró la solicitud');
      return;
    }

    // Mostrar información actual y pedir contraoferta
    const currentPrice = request.studentOfferedPrice;
    const courseName = request.courseName || getCourseName(request.courseId);

    const message =
      `CONTRAOFERTA - ${courseName}\n\n` +
      `El estudiante ofreció: S/ ${currentPrice}/hora\n\n` +
      `¿Cuál es tu contraoferta? (Ingresa solo el número)`;

    const newPrice = prompt(message, currentPrice + 5);

    if (newPrice === null) {
      // Usuario canceló
      return;
    }

    if (!newPrice || isNaN(newPrice) || parseFloat(newPrice) <= 0) {
      alert('⚠️ Precio inválido. Debe ser un número mayor a 0.');
      return;
    }

    const finalPrice = parseFloat(newPrice);
    const requestIndex = requests.findIndex(req => req.id === requestId);

    if (requestIndex !== -1) {
      requests[requestIndex].status = 'counter_offer';
      requests[requestIndex].tutorCounterPrice = finalPrice;
      requests[requestIndex].lastUpdated = new Date().toISOString();

      localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

      // Crear notificación para el estudiante
      createNotificationForStudent(requests[requestIndex], 'counter_offer');

      alert(`✅ ¡Contraoferta enviada!\n\nTu oferta: S/ ${finalPrice}/hora\nEl estudiante recibirá una notificación.`);

      // Recargar datos
      setTimeout(() => {
        loadUserData();
      }, 100);
    }
  };

  function createNotificationForStudent(request, action) {
    const notifications = JSON.parse(localStorage.getItem('hermesNotifications') || '[]');

    let title, message;
    switch (action) {
      case 'accepted':
        title = 'Solicitud aceptada';
        message = 'Tu solicitud de tutoría ha sido aceptada';
        break;
      case 'rejected':
        title = 'Solicitud rechazada';
        message = 'Tu solicitud de tutoría ha sido rechazada';
        break;
      case 'counter_offer':
        title = 'Contraoferta recibida';
        message = `El tutor ha hecho una contraoferta: S/ ${request.tutorCounterPrice}/hora`;
        break;
      default:
        title = 'Actualización de solicitud';
        message = 'Tu solicitud de tutoría ha sido actualizada';
    }

    const newNotification = {
      id: 'NOTIF_' + Date.now(),
      userId: request.studentId,
      type: action,
      title: title,
      message: message,
      data: {
        requestId: request.id,
        tutorId: request.tutorId,
        courseId: request.courseId,
      },
      read: false,
      createdAt: new Date().toISOString(),
    };

    notifications.push(newNotification);
    localStorage.setItem('hermesNotifications', JSON.stringify(notifications));
  }

  // ===== FUNCIONES PARA RESPUESTAS DEL ESTUDIANTE A CONTRAOFERTA =====

  // Aceptar contraoferta del tutor
  window.acceptCounterOffer = function (requestId) {
    console.log('Student accepting counter offer:', requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const requestIndex = requests.findIndex(req => req.id === requestId);

    if (requestIndex !== -1) {
      const request = requests[requestIndex];
      const finalPrice = request.tutorCounterPrice;
      const courseName = request.courseName || getCourseName(request.courseId);

      const confirmMessage =
        `¿Confirmas que aceptas la contraoferta?\n\n` +
        `Curso: ${courseName}\n` +
        `Precio final: S/ ${finalPrice}/hora\n\n` +
        `Esta acción confirmará la tutoría.`;

      if (confirm(confirmMessage)) {
        requests[requestIndex].status = 'accepted';
        requests[requestIndex].finalPrice = finalPrice;
        requests[requestIndex].lastUpdated = new Date().toISOString();

        localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

        // Crear notificación para el tutor
        createNotificationForTutor(requests[requestIndex], 'counter_accepted');

        alert(`✅ ¡Contraoferta aceptada!\n\nPrecio final: S/ ${finalPrice}/hora\nLa tutoría ha sido confirmada.`);

        // Forzar actualización completa
        setTimeout(() => {
          loadUserData();
        }, 100);
      }
    }
  };

  // Rechazar contraoferta del tutor
  window.rejectCounterOffer = function (requestId) {
    console.log('Student rejecting counter offer:', requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const request = requests.find(req => req.id === requestId);

    if (!request) {
      alert('Error: No se encontró la solicitud');
      return;
    }

    const courseName = request.courseName || getCourseName(request.courseId);
    const tutorPrice = request.tutorCounterPrice;

    const confirmMessage =
      `¿Confirmas que rechazas la contraoferta?\n\n` +
      `Curso: ${courseName}\n` +
      `Contraoferta del tutor: S/ ${tutorPrice}/hora\n\n` +
      `Esta acción terminará la negociación.`;

    if (confirm(confirmMessage)) {
      const requestIndex = requests.findIndex(req => req.id === requestId);

      if (requestIndex !== -1) {
        requests[requestIndex].status = 'rejected';
        requests[requestIndex].lastUpdated = new Date().toISOString();

        localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

        // Crear notificación para el tutor
        createNotificationForTutor(requests[requestIndex], 'counter_rejected');

        alert('❌ Contraoferta rechazada.\n\nLa negociación ha terminado.');

        // Forzar actualización completa
        setTimeout(() => {
          loadUserData();
        }, 100);
      }
    }
  };

  // Abrir contraoferta del estudiante
  window.openStudentCounterModal = function (requestId, tutorPrice) {
    console.log('Opening student counter offer for request:', requestId, 'tutor price:', tutorPrice);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const request = requests.find(req => req.id === requestId);

    if (!request) {
      alert('Error: No se encontró la solicitud');
      return;
    }

    const courseName = request.courseName || getCourseName(request.courseId);
    const originalPrice = request.studentOfferedPrice;

    const message =
      `NUEVA CONTRAOFERTA - ${courseName}\n\n` +
      `Tu oferta original: S/ ${originalPrice}/hora\n` +
      `Contraoferta del tutor: S/ ${tutorPrice}/hora\n\n` +
      `¿Cuál es tu nueva contraoferta? (Ingresa solo el número)`;

    const newPrice = prompt(message, tutorPrice - 2);

    if (newPrice === null) {
      // Usuario canceló
      return;
    }

    if (!newPrice || isNaN(newPrice) || parseFloat(newPrice) <= 0) {
      alert('⚠️ Precio inválido. Debe ser un número mayor a 0.');
      return;
    }

    const finalPrice = parseFloat(newPrice);
    const requestIndex = requests.findIndex(req => req.id === requestId);

    if (requestIndex !== -1) {
      requests[requestIndex].status = 'counter_offer';
      requests[requestIndex].studentCounterPrice = finalPrice;
      requests[requestIndex].lastUpdated = new Date().toISOString();

      localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

      // Crear notificación para el tutor
      createNotificationForTutor(requests[requestIndex], 'student_counter');

      alert(`✅ ¡Nueva contraoferta enviada!\n\nTu oferta: S/ ${finalPrice}/hora\nEl tutor recibirá una notificación.`);

      // Recargar datos
      setTimeout(() => {
        loadUserData();
      }, 100);
    }
  };

  // Función para crear notificaciones para el tutor
  function createNotificationForTutor(request, action) {
    const notifications = JSON.parse(localStorage.getItem('hermesNotifications') || '[]');

    let title, message;
    switch (action) {
      case 'counter_accepted':
        title = '✅ Contraoferta Aceptada';
        message = `El estudiante aceptó tu contraoferta de S/ ${request.tutorCounterPrice}/hora para ${request.courseName || 'el curso'}`;
        break;
      case 'counter_rejected':
        title = '❌ Contraoferta Rechazada';
        message = `El estudiante rechazó tu contraoferta para ${request.courseName || 'el curso'}`;
        break;
      case 'student_counter':
        title = '🔄 Nueva Contraoferta';
        message = `El estudiante hizo una nueva contraoferta de S/ ${request.studentCounterPrice}/hora para ${request.courseName || 'el curso'}`;
        break;
    }

    const newNotification = {
      id: Date.now() + Math.random(),
      userId: request.tutorId,
      title: title,
      message: message,
      type: action,
      data: {
        requestId: request.id,
        courseId: request.courseId,
        price: action === 'student_counter' ? request.studentCounterPrice : request.tutorCounterPrice,
      },
      read: false,
      createdAt: new Date().toISOString(),
    };

    notifications.push(newNotification);
    localStorage.setItem('hermesNotifications', JSON.stringify(notifications));
  }

  function showApplyTutorButton() {
    const applyTutorBtn = document.getElementById('applyTutorBtn');
    if (applyTutorBtn) {
      applyTutorBtn.style.display = 'flex';

      // Agregar evento click para redirigir a la página de aplicación
      applyTutorBtn.addEventListener('click', function () {
        window.location.href = `${baseUrl}/become-tutor`;
      });
    }
  }

  function showTutorModule(user) {
    // Mostrar elementos del header para tutores (solo badges)
    const tutorBadge = document.getElementById('tutorBadge');
    const tutorStatusText = document.getElementById('tutorStatusText');

    if (tutorBadge) {
      tutorBadge.style.display = 'flex';
    }
    if (tutorStatusText) {
      tutorStatusText.style.display = 'flex';
    }

    // Mostrar columna tutor
    const tutorColumn = document.getElementById('tutorColumn');
    if (tutorColumn) {
      tutorColumn.style.display = 'flex';
    }

    // Actualizar estado del tutor
    const statusElement = document.getElementById('tutorStatus');
    if (statusElement && user.roles.tutorStatus) {
      statusElement.textContent =
        user.roles.tutorStatus === 'approved'
          ? 'Verificado'
          : user.roles.tutorStatus === 'pending'
            ? 'Pendiente'
            : 'Rechazado';
      statusElement.className = `tutor-badge ${user.roles.tutorStatus}`;
    }

    // Actualizar información del tutor
    if (user.tutorProfile) {
      // Mostrar información del curso
      if (user.tutorProfile.courses && user.tutorProfile.courses.length > 0) {
        const course = user.tutorProfile.courses[0];
        const courseNameEl = document.getElementById('tutorCourseName');
        const courseCodeEl = document.getElementById('tutorCourseCode');

        if (courseNameEl) courseNameEl.textContent = course.courseName || '-';
        if (courseCodeEl) courseCodeEl.textContent = course.courseCode || '-';
      }

      // Actualizar estadísticas
      document.getElementById('tutorRating').textContent = user.tutorProfile.rating || '4.8';
      document.getElementById('tutorSessions').textContent = user.tutorProfile.totalSessions || '27';
      document.getElementById('tutorCourses').textContent = user.tutorProfile.courses
        ? user.tutorProfile.courses.length
        : '1';
    }
  }

  function manageCourses() {
    alert('Función "Gestionar horarios" estará disponible próximamente');
  }

  function openTutorPanel() {
    // Modal o página dedicada al panel del tutor
    alert(
      '🎓 Panel de Tutor\n\nFunciones disponibles:\n• Gestionar solicitudes\n• Ver estadísticas\n• Configurar horarios\n• Actualizar perfil\n\n(En desarrollo...)'
    );
  }

  function joinTutoringSession(sessionId) {
    // Redirigir a la página de videollamada simulada
    window.location.href = `${baseUrl}/videocall`;
  }

  function goToMyCourses() {
    const user = window.auth?.getCurrentUser();

    if (!user) {
      window.location.href = `${baseUrl}/auth`;
      return;
    }

    // Obtener la universidad del usuario
    let universityId = null;
    if (user.profile && user.profile.universityId) {
      universityId = user.profile.universityId;
    }

    // Si tiene universidad, filtrar por ella usando query parameters; si no, mostrar todos
    if (universityId) {
      const targetUrl = `${baseUrl}/courses?university=${universityId}`;
      window.location.href = targetUrl;
    } else {
      const targetUrl = `${baseUrl}/courses`;
      window.location.href = targetUrl;
    }
  }

  // Funciones para cambiar el layout del dashboard
  function setStudentOnlyLayout() {
    const mainGrid = document.getElementById('dashboardMainGrid');
    const studentOnlyContainer = document.getElementById('studentOnlyContainer');
    const studentColumnOriginal = document.getElementById('studentColumnOriginal');
    const studentColumnHeader = document.getElementById('studentColumnHeader');

    if (mainGrid) {
      mainGrid.className = 'dashboard-main-grid student-only-layout';
    }

    if (studentOnlyContainer) {
      studentOnlyContainer.style.display = 'flex';
    }

    if (studentColumnOriginal) {
      studentColumnOriginal.style.display = 'none';
    }

    if (studentColumnHeader) {
      studentColumnHeader.style.display = 'none';
    }

    console.log('✅ Layout cambiado a: Solo estudiante (2 columnas arriba)');
  }

  function setTutorLayout() {
    const mainGrid = document.getElementById('dashboardMainGrid');
    const studentOnlyContainer = document.getElementById('studentOnlyContainer');
    const studentColumnOriginal = document.getElementById('studentColumnOriginal');
    const studentColumnHeader = document.getElementById('studentColumnHeader');

    if (mainGrid) {
      mainGrid.className = 'dashboard-main-grid';
    }

    if (studentOnlyContainer) {
      studentOnlyContainer.style.display = 'none';
    }

    if (studentColumnOriginal) {
      studentColumnOriginal.style.display = 'flex';
    }

    if (studentColumnHeader) {
      studentColumnHeader.style.display = 'flex';
    }

    console.log('✅ Layout cambiado a: Tutor (2 columnas lado a lado)');
  }

  // Hacer funciones globales
  window.logout = logout;
  window.manageCourses = manageCourses;
  window.openTutorPanel = openTutorPanel;
  window.joinTutoringSession = joinTutoringSession;
  window.goToMyCourses = goToMyCourses;
</script>

<style>
  .dashboard-section {
    min-height: calc(100vh - 64px);
    padding: var(--spacing-md) 0;
    background: linear-gradient(to bottom, #fafafa, #ffffff);
  }

  .container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    min-height: calc(100vh - 64px - 2rem);
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--spacing-md);
  }

  /* Header del Dashboard */
  .dashboard-header {
    padding: var(--spacing-md);
    background: white;
    border-radius: var(--radius-lg);
    border: 1px solid #f1f5f9;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);
    flex-shrink: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .user-welcome {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
  }

  .user-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 18px;
    position: relative;
  }

  /* Badge de tutor verificado */
  .tutor-verified-badge {
    position: absolute;
    bottom: -2px;
    right: -2px;
    width: 18px;
    height: 18px;
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    border: 2px solid white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 8px;
    color: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Badge de texto para tutor */
  .tutor-status-text {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    font-size: var(--font-size-xs);
    color: #10b981;
    font-weight: 600;
    margin-top: var(--spacing-xs);
  }

  /* Acciones del header */
  .header-actions {
    display: flex;
    gap: var(--spacing-sm);
  }

  .header-action-btn {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm) var(--spacing-md);
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: var(--font-size-sm);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(99, 102, 241, 0.2);
  }

  .header-action-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(99, 102, 241, 0.3);
  }

  .header-action-btn:active {
    transform: translateY(0);
  }

  /* Botón aplicar como tutor */
  .apply-tutor-btn {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm) var(--spacing-md);
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: var(--font-size-sm);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
  }

  .apply-tutor-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
    background: linear-gradient(135deg, #059669 0%, #047857 100%);
  }

  .apply-tutor-btn:active {
    transform: translateY(0);
  }

  .user-name {
    font-size: var(--font-size-lg);
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 var(--spacing-xs) 0;
  }

  .user-university {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    margin: 0;
  }

  /* Dashboard Grid */
  .dashboard-main-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-md);
    align-items: start;
  }

  /* Layout especial para solo estudiante */
  .dashboard-main-grid.student-only-layout {
    grid-template-columns: 1fr;
  }

  .dashboard-main-grid.student-only-layout .student-column {
    width: 100%;
  }

  .dashboard-main-grid.student-only-layout .column-header {
    display: none;
  }

  /* Container para layout solo estudiante */
  .student-only-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  .student-top-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-md);
  }

  /* Layout vertical para panel estudiante en modo tutor */
  .dashboard-main-grid:not(.student-only-layout) .student-column-original {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  .student-actions-full {
    width: 100%;
  }

  /* Ocultar layout original cuando está en modo solo estudiante */
  .dashboard-main-grid.student-only-layout .student-column-original {
    display: none !important;
  }

  /* Columnas */
  .student-column,
  .tutor-column {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  .column-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) var(--spacing-md);
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    color: white;
    border-radius: var(--radius-lg);
    box-shadow: 0 2px 4px rgba(99, 102, 241, 0.2);
  }

  .column-header h3 {
    margin: 0;
    font-size: var(--font-size-base);
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .tutor-column .column-header {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
  }

  /* Cards principales mejoradas */
  .dashboard-card {
    background: white !important;
    border-radius: 5px !important;
    padding: var(--spacing-md) !important;
    border: 1px solid #e2e8f0 !important;
    display: flex !important;
    flex-direction: column !important;
    box-shadow: none !important;
    transition: none !important;
    transform: none !important;
    position: static !important;
    overflow: visible !important;
  }

  .dashboard-card::before {
    display: none !important;
    content: none !important;
  }

  .dashboard-card:hover {
    box-shadow: none !important;
    transform: none !important;
    border-color: #e2e8f0 !important;
    background: white !important;
  }

  .dashboard-card h2 {
    font-size: var(--font-size-lg);
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 var(--spacing-md) 0;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .dashboard-card h2 i {
    color: #6366f1;
    font-size: var(--font-size-base);
    background: rgba(99, 102, 241, 0.1);
    padding: var(--spacing-xs);
    border-radius: var(--radius-md);
  }

  /* Cards específicas */
  .tutorials-card,
  .requests-card {
    min-height: 300px;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-sm);
  }

  .stat-item {
    text-align: center;
    padding: var(--spacing-md);
    background: #f8fafc;
    border-radius: var(--radius-md);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    min-height: 0;
  }

  .stat-icon {
    font-size: var(--font-size-lg);
    color: #6366f1;
    margin-bottom: var(--spacing-xs);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-lg);
    flex-shrink: 0;
    padding-bottom: var(--spacing-sm);
    border-bottom: 1px solid rgba(99, 102, 241, 0.1);
  }

  .settings-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    font-size: var(--font-size-lg);
    cursor: pointer;
    padding: var(--spacing-xs);
    border-radius: var(--radius-sm);
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .settings-btn:hover {
    background: var(--color-primary-light);
    color: var(--color-primary);
    transform: rotate(15deg);
  }

  .count-badge {
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    color: white;
    padding: var(--spacing-xs) var(--spacing-md);
    border-radius: var(--radius-full);
    font-size: var(--font-size-xs);
    font-weight: 600;
    box-shadow: 0 2px 4px rgba(99, 102, 241, 0.3);
    min-width: 24px;
    text-align: center;
  }

  /* Lista de tutorías mejorada */

  /* Lista de solicitudes pendientes mejorada */

  /* Recomendaciones */
  .recommendations-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    overflow-y: auto;
    flex: 1;
    min-height: 0;
  }

  .recommendation-item {
    padding: var(--spacing-sm);
    background: #f8fafc;
    border-radius: var(--radius-md);
    border: 1px solid #f1f5f9;
    flex-shrink: 0;
  }

  .rec-course {
    font-size: var(--font-size-sm);
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 var(--spacing-xs) 0;
  }

  .rec-tutor {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
    margin: 0 0 var(--spacing-xs) 0;
  }

  .rec-reason {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
    margin: 0;
    font-style: italic;
  }

  /* Acciones rápidas */
  .actions-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-xs);
  }

  .action-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm);
    background: #f8fafc;
    border: 1px solid #f1f5f9;
    border-radius: var(--radius-md);
    text-decoration: none;
    color: var(--text-primary);
    transition: all 0.2s ease;
    font-size: var(--font-size-xs);
    min-height: 80px;
  }

  .action-btn:hover {
    background: #eff6ff;
    border-color: #6366f1;
    color: #6366f1;
    transform: translateY(-1px);
  }

  .action-btn i {
    font-size: var(--font-size-sm);
  }

  /* Estadísticas */
  .stats-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--spacing-sm);
    flex: 1;
  }

  .stat-item {
    text-align: center;
    padding: var(--spacing-sm);
    background: #f8fafc;
    border-radius: var(--radius-md);
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 0;
  }

  .stat-number {
    display: block;
    font-size: var(--font-size-xl);
    font-weight: 700;
    color: #6366f1;
    margin-bottom: var(--spacing-xs);
  }

  .stat-label {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
  }

  /* Módulo Tutor */
  .tutor-course-info {
    padding: var(--spacing-md);
    background: #f8fafc;
    border-radius: var(--radius-md);
    border: 1px solid #e2e8f0;
  }

  .course-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .course-item i {
    color: #10b981;
    font-size: var(--font-size-base);
    width: 20px;
    text-align: center;
  }

  .course-details {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }

  .course-name {
    font-size: var(--font-size-sm);
    font-weight: 600;
    color: var(--text-primary);
  }

  .course-code {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
    font-family: 'Courier New', monospace;
  }

  .tutor-stats {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: var(--spacing-sm);
  }

  .tutor-stat {
    text-align: center;
    padding: var(--spacing-md);
    background: #f8fafc;
    border-radius: var(--radius-md);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xs);
  }

  .tutor-stat .stat-number {
    display: block;
    font-size: var(--font-size-lg);
    font-weight: 700;
    color: #10b981;
  }

  .tutor-stat .stat-label {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
  }

  .tutor-stat .stat-icon {
    font-size: var(--font-size-base);
    color: #10b981;
  }

  /* Disponibilidad */
  .availability-tags {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
  }

  .availability-tag {
    background: #dbeafe;
    color: #1e40af;
    padding: var(--spacing-sm);
    border-radius: var(--radius-md);
    font-size: var(--font-size-xs);
    font-weight: 500;
    border: 1px solid #93c5fd;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
  }

  .availability-tag i {
    color: #3b82f6;
  }

  /* Badges de tutor */
  .tutor-badge {
    font-size: var(--font-size-xs);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--radius-sm);
    font-weight: 500;
  }

  .tutor-badge.approved {
    background: #dcfce7;
    color: #166534;
  }

  .tutor-badge.pending {
    background: #fef3c7;
    color: #92400e;
  }

  .tutor-badge.rejected {
    background: #fee2e2;
    color: #991b1b;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .dashboard-main-grid {
      grid-template-columns: 1fr;
    }

    .student-column,
    .tutor-column {
      order: 1;
    }

    .tutor-column {
      order: 2;
    }

    /* Layout solo estudiante en tablet */
    .student-top-row {
      grid-template-columns: 1fr;
      gap: var(--spacing-sm);
    }
  }

  @media (max-width: 768px) {
    .dashboard-section {
      min-height: auto;
      padding: var(--spacing-sm) 0;
    }

    .container {
      min-height: auto;
      gap: var(--spacing-sm);
    }

    .dashboard-header {
      padding: var(--spacing-sm);
      flex-direction: column;
      gap: var(--spacing-sm);
    }

    .user-avatar {
      width: 40px;
      height: 40px;
      font-size: 16px;
    }

    .tutor-verified-badge {
      width: 16px;
      height: 16px;
      font-size: 7px;
    }

    .user-name {
      font-size: var(--font-size-base);
    }

    .dashboard-main-grid {
      grid-template-columns: 1fr;
      gap: var(--spacing-sm);
    }

    /* Layout solo estudiante en móvil */
    .student-top-row {
      grid-template-columns: 1fr;
      gap: var(--spacing-sm);
    }

    .actions-grid {
      grid-template-columns: 1fr 1fr;
    }

    .dashboard-card {
      padding: var(--spacing-sm) !important;
      border-radius: 5px !important;
      box-shadow: none !important;
      transform: none !important;
    }

    .column-header {
      padding: var(--spacing-xs) var(--spacing-sm);
    }

    .column-header h3 {
      font-size: var(--font-size-sm);
    }

    .tutor-stats {
      grid-template-columns: 1fr;
      gap: var(--spacing-xs);
    }

    .availability-tags {
      gap: var(--spacing-xs);
    }
  }

  /* Estilos para botones de acción del estudiante */
  .student-action-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
</style>
