---
// Los datos reales del usuario se obtendrán vía JavaScript en el cliente
// Por ahora solo definimos la estructura
// import '../styles/modals.css'; // Comentado para evitar conflictos con modales embebidos
---

<section class='dashboard-section'>
  <div class='container'>
    <!-- Header compacto -->
    <div class='dashboard-header'>
      <div class='user-welcome'>
        <div class='user-avatar'>
          <i class='fas fa-user'></i>
          <!-- Badge de tutor verificado -->
          <div class='tutor-verified-badge' id='tutorBadge' style='display: none;'>
            <i class='fas fa-shield-check'></i>
          </div>
        </div>
        <div class='user-info'>
          <h1 class='user-name' id='userName'>¡Hola, Usuario!</h1>
          <p class='user-university' id='userUniversity'>Universidad</p>
          <!-- Badge de texto para tutor -->
          <span class='tutor-status-text' id='tutorStatusText' style='display: none;'>
            <i class='fas fa-chalkboard-teacher'></i>
            Tutor Verificado
          </span>
        </div>
      </div>

      <!-- Botón aplicar como tutor (solo visible para estudiantes no tutores) -->
      <div class='header-actions'>
        <button class='apply-tutor-btn' id='applyTutorBtn' style='display: none;'>
          <i class='fas fa-chalkboard-teacher'></i>
          Aplicar como tutor
        </button>
      </div>
    </div>

    <!-- Grid principal dividido -->
    <div class='dashboard-main-grid' id='dashboardMainGrid'>
      <!-- Columna Estudiante (Izquierda) -->
      <div class='student-column' id='studentColumn'>
        <div class='column-header' id='studentColumnHeader'>
          <h3><i class='fas fa-user-graduate'></i> Panel Estudiante</h3>
        </div>

        <!-- Container especial para layout solo estudiante -->
        <div class='student-only-container' id='studentOnlyContainer' style='display: none;'>
          <div class='student-top-row'>
            <!-- Próximas tutorías -->
            <div class='dashboard-card tutorials-card'>
              <div class='card-header'>
                <h2><i class='fas fa-clock'></i> Próximas tutorías</h2>
                <span class='count-badge' id='tutorialsCount'>0</span>
              </div>
              <div
                class='tutorials-list'
                id='tutorialsList'
                style='display: flex; flex-direction: column; gap: 0.5rem; padding: 0;'
              >
                <div
                  class='empty-state'
                  style='background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 0.75rem; text-align: center;'
                >
                  <i class='fas fa-calendar-plus' style='font-size: 1.5rem; color: #cbd5e1; margin-bottom: 0.25rem;'>
                  </i>
                  <p style='margin: 0 0 0.5rem 0; color: #64748b; font-size: 0.75rem;'>
                    No tienes tutorías programadas
                  </p>
                  <a
                    href='#'
                    onclick='goToMyCourses()'
                    class='compact-search-btn'
                    style='background: #8b5cf6; color: white; padding: 0.125rem 0.5rem; border-radius: 4px; text-decoration: none; font-size: 0.8rem; display: inline-block; line-height: 1.2;'
                  >
                    Buscar Cursos
                  </a>
                </div>
              </div>
            </div>

            <!-- Solicitudes Pendientes -->
            <div class='dashboard-card requests-card'>
              <div class='card-header'>
                <h2><i class='fas fa-hourglass-half'></i> Solicitudes Pendientes</h2>
                <span class='count-badge' id='requestsCount'>0</span>
              </div>
              <div
                class='requests-list'
                id='requestsList'
                style='display: flex; flex-direction: column; gap: 0.5rem; padding: 0;'
              >
                <div
                  class='empty-state'
                  style='background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 1rem; text-align: center;'
                >
                  <i class='fas fa-envelope' style='font-size: 1.5rem; color: #cbd5e1; margin-bottom: 0.25rem;'></i>
                  <p style='margin: 0; color: #64748b; font-size: 0.75rem;'>No tienes solicitudes pendientes</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Accesos rápidos (fila completa) -->
          <div class='dashboard-card actions-card student-actions-full'>
            <div class='card-header'>
              <h2><i class='fas fa-rocket'></i> Accesos rápidos</h2>
            </div>
            <div class='actions-grid'>
              <a href='#' onclick='goToMyCourses()' class='action-btn'>
                <i class='fas fa-search'></i>
                <span>Cursos</span>
              </a>
              <a href={import.meta.env.BASE_URL + '/universities'} class='action-btn'>
                <i class='fas fa-university'></i>
                <span>Universidades</span>
              </a>
            </div>
          </div>
        </div>

        <!-- Layout original para modo tutor (se oculta en modo solo estudiante) -->
        <div class='student-column-original' id='studentColumnOriginal'>
          <!-- Próximas tutorías -->
          <div class='dashboard-card tutorials-card'>
            <div class='card-header'>
              <h2><i class='fas fa-clock'></i> Próximas tutorías</h2>
              <span class='count-badge' id='tutorialsCount2'>0</span>
            </div>
            <div
              class='tutorials-list'
              id='tutorialsList2'
              style='display: flex; flex-direction: column; gap: 0.5rem; padding: 0;'
            >
              <div
                class='empty-state'
                style='background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 0.75rem; text-align: center;'
              >
                <i class='fas fa-calendar-plus' style='font-size: 1.5rem; color: #cbd5e1; margin-bottom: 0.25rem;'></i>
                <p style='margin: 0 0 0.5rem 0; color: #64748b; font-size: 0.75rem;'>No tienes tutorías programadas</p>
                <a
                  href='#'
                  onclick='goToMyCourses()'
                  class='compact-search-btn'
                  style='background: #8b5cf6; color: white; padding: 0.125rem 0.5rem; border-radius: 4px; text-decoration: none; font-size: 0.8rem; display: inline-block; line-height: 1.2;'
                >
                  Buscar Cursos
                </a>
              </div>
            </div>
          </div>

          <!-- Solicitudes Pendientes -->
          <div class='dashboard-card requests-card'>
            <div class='card-header'>
              <h2><i class='fas fa-hourglass-half'></i> Solicitudes Pendientes</h2>
              <span class='count-badge' id='requestsCount2'>0</span>
            </div>
            <div
              class='requests-list'
              id='requestsList2'
              style='display: flex; flex-direction: column; gap: 0.5rem; padding: 0;'
            >
              <div
                class='empty-state'
                style='background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 1rem; text-align: center;'
              >
                <i class='fas fa-envelope' style='font-size: 1.5rem; color: #cbd5e1; margin-bottom: 0.25rem;'></i>
                <p style='margin: 0; color: #64748b; font-size: 0.75rem;'>No tienes solicitudes pendientes</p>
              </div>
            </div>
          </div>

          <!-- Accesos rápidos estudiante -->
          <div class='dashboard-card actions-card'>
            <div class='card-header'>
              <h2><i class='fas fa-rocket'></i> Accesos rápidos</h2>
            </div>
            <div class='actions-grid'>
              <a href='#' onclick='goToMyCourses()' class='action-btn'>
                <i class='fas fa-search'></i>
                <span>Cursos</span>
              </a>
              <a href={import.meta.env.BASE_URL + '/universities'} class='action-btn'>
                <i class='fas fa-university'></i>
                <span>Universidades</span>
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Columna Tutor (Derecha) -->
      <div class='tutor-column' id='tutorColumn' style='display: none;'>
        <div class='column-header'>
          <h3><i class='fas fa-chalkboard-teacher'></i> Panel Tutor</h3>
          <span class='tutor-badge' id='tutorStatus'>Verificado</span>
        </div>

        <!-- Información del curso que enseña -->
        <div class='dashboard-card tutor-course-card'>
          <div class='card-header'>
            <h2><i class='fas fa-book'></i> Mi Curso</h2>
          </div>
          <div class='tutor-course-info' id='tutorCourseInfo'>
            <div class='course-item'>
              <i class='fas fa-code'></i>
              <div class='course-details'>
                <span class='course-name' id='tutorCourseName'>-</span>
                <span class='course-code' id='tutorCourseCode'>-</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Solicitudes Entrantes del Tutor -->
        <div class='dashboard-card tutor-requests-card'>
          <div class='card-header'>
            <h2><i class='fas fa-inbox'></i> Solicitudes Entrantes</h2>
            <span class='count-badge tutor-count-badge' id='tutorRequestsCount'>0</span>
          </div>
          <div class='tutor-requests-list' id='tutorRequestsList'>
            <div class='empty-state'>
              <i class='fas fa-inbox-in'></i>
              <p>No hay solicitudes pendientes</p>
            </div>
          </div>
        </div>

        <!-- Estadísticas del tutor -->
        <div class='dashboard-card tutor-stats-card'>
          <div class='card-header'>
            <h2><i class='fas fa-chart-bar'></i> Estadísticas</h2>
          </div>
          <div class='tutor-stats'>
            <div class='tutor-stat'>
              <i class='fas fa-star stat-icon'></i>
              <span class='stat-number' id='tutorRating'>4.8</span>
              <span class='stat-label'>Rating</span>
            </div>
            <div class='tutor-stat'>
              <i class='fas fa-users stat-icon'></i>
              <span class='stat-number' id='tutorSessions'>27</span>
              <span class='stat-label'>Sesiones</span>
            </div>
            <div class='tutor-stat'>
              <i class='fas fa-book-open stat-icon'></i>
              <span class='stat-number' id='tutorCourses'>1</span>
              <span class='stat-label'>Cursos</span>
            </div>
          </div>
        </div>

        <!-- Disponibilidad -->
        <div class='dashboard-card availability-card'>
          <div class='card-header'>
            <h2><i class='fas fa-calendar'></i> Horarios Disponibles</h2>
            <button class='settings-btn' onclick='manageCourses()' title='Gestionar horarios'>
              <i class='fas fa-cog'></i>
            </button>
          </div>
          <div class='availability-tags'>
            <span class='availability-tag'><i class='fas fa-clock'></i> Lun: 14:00-16:00</span>
            <span class='availability-tag'><i class='fas fa-clock'></i> Mié: 18:00-20:00</span>
            <span class='availability-tag'><i class='fas fa-clock'></i> Sáb: 09:00-12:00</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ baseUrl: import.meta.env.BASE_URL }}>
  // ===== MODAL MANAGER EMBEBIDO COMPLETO =====

  console.log('Creando ModalManager profesional embebido...');

  // Crear el ModalManager directamente embebido
  window.modalManager = {
    modals: new Map(),
    zIndexBase: 10000,
    currentZIndex: 10000,

    // Función de limpieza específica para overlays modales
    cleanupWhiteOverlay() {
      console.log('🔧 Limpiando overlays blancos...');

      // Limpiar todos los overlays modales por clase y atributos específicos
      const overlaysToRemove = document.querySelectorAll(`
        .modal-overlay,
        [id^="modal-"],
        [id^="modal_"],
        [style*="z-index: 99999"],
        [style*="position: fixed"][style*="background: rgba"]
      `);

      overlaysToRemove.forEach(overlay => {
        // PROTEGER EL HEADER - nunca eliminar elementos con estas clases/ids
        const isHeader =
          overlay.classList.contains('dashboard-header') ||
          overlay.closest('.dashboard-header') ||
          overlay.id === 'dashboard-header' ||
          overlay.tagName === 'HEADER';

        if (!isHeader) {
          console.log('🗑️ Eliminando overlay:', overlay.id || overlay.className);
          overlay.remove();
        } else {
          console.log('🛡️ Protegiendo header, no eliminado');
        }
      });

      // Limpiar overlays con z-index alto pero sin clase específica
      document.querySelectorAll('div').forEach(div => {
        const style = div.style.cssText || '';
        const hasHighZIndex = style.includes('z-index: 99999') || style.includes('z-index: 10000');
        const hasFixedPosition = style.includes('position: fixed');
        const hasFullSize = style.includes('width: 100%') && style.includes('height: 100%');

        if (hasHighZIndex && hasFixedPosition && hasFullSize) {
          const isHeader =
            div.classList.contains('dashboard-header') ||
            div.closest('.dashboard-header') ||
            div.id === 'dashboard-header';

          if (!isHeader) {
            console.log('🗑️ Eliminando overlay sin clase específica');
            div.remove();
          }
        }
      });

      // Limpiar Map de modales
      this.modals.clear();
      console.log('✅ Limpieza completada');
    },

    init() {
      // Crear contenedor de modales si no existe
      if (!document.getElementById('modal-container')) {
        const container = document.createElement('div');
        container.id = 'modal-container';
        container.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          pointer-events: none;
          z-index: ${this.zIndexBase};
        `;
        document.body.appendChild(container);
      }
    },

    createModal({ type, title, message, buttons = [], defaultValue = '', customClass = '' }) {
      const modalId = 'modal_' + Date.now() + '_' + Math.random().toString(36).substring(2);

      // Crear overlay
      const overlay = document.createElement('div');
      overlay.setAttribute(
        'style',
        `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 99999;
        padding: 16px;
        box-sizing: border-box;
      `
      );

      // Crear modal
      const modal = document.createElement('div');
      modal.setAttribute(
        'style',
        `
        background: white;
        border-radius: 5px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        width: 400px;
        max-width: 90vw;
        max-height: 90vh;
        overflow: hidden;
        position: relative;
      `
      );

      // Header
      const header = document.createElement('div');
      header.setAttribute(
        'style',
        `
        padding: 20px;
        border-bottom: 1px solid #e5e7eb;
        background: #fafafa;
      `
      );
      header.innerHTML = `<h3 style="margin: 0; color: #111827; font-size: 18px; font-weight: 600;">${title}</h3>`;

      // Body
      const body = document.createElement('div');
      body.setAttribute('style', 'padding: 16px;');

      const messageEl = document.createElement('div');
      messageEl.setAttribute(
        'style',
        `
        color: #374151;
        line-height: 1.5;
        font-size: 14px;
        margin-bottom: ${type === 'prompt' ? '12px' : '0'};
      `
      );
      messageEl.innerHTML = message;
      body.appendChild(messageEl);

      // Input para prompt
      let inputEl = null;
      if (type === 'prompt') {
        inputEl = document.createElement('input');
        inputEl.type = 'text';
        inputEl.value = defaultValue;
        inputEl.setAttribute(
          'style',
          `
          width: 100%;
          padding: 8px 12px;
          border: 1px solid #d1d5db;
          border-radius: 4px;
          font-size: 14px;
          outline: none;
          box-sizing: border-box;
        `
        );
        inputEl.addEventListener('focus', () => {
          inputEl.style.borderColor = '#6366f1';
          inputEl.style.boxShadow = '0 0 0 3px rgba(99, 102, 241, 0.1)';
        });
        inputEl.addEventListener('blur', () => {
          inputEl.style.borderColor = '#d1d5db';
          inputEl.style.boxShadow = 'none';
        });
        body.appendChild(inputEl);
      }

      // Footer
      const footer = document.createElement('div');
      footer.setAttribute(
        'style',
        `
        padding: 16px;
        border-top: 1px solid #e5e7eb;
        background: #fafafa;
        display: flex;
        gap: 8px;
        justify-content: flex-end;
      `
      );

      // Botones
      buttons.forEach(btnConfig => {
        const btn = document.createElement('button');
        btn.textContent = btnConfig.text;
        btn.setAttribute('style', this.getButtonStyles(btnConfig.class));
        btn.addEventListener('click', () => {
          if (type === 'prompt' && inputEl) {
            btnConfig.action(inputEl.value);
          } else {
            btnConfig.action();
          }
        });
        footer.appendChild(btn);
      });

      // Ensamblar modal
      modal.appendChild(header);
      modal.appendChild(body);
      modal.appendChild(footer);
      overlay.appendChild(modal);

      // Agregar al DOM
      document.body.appendChild(overlay);

      // Guardar referencia
      this.modals.set(modalId, overlay);

      // Enfocar input si es prompt
      if (inputEl) {
        setTimeout(() => inputEl.focus(), 100);
      }

      return modalId;
    },

    closeModal(modalId) {
      const modal = this.modals.get(modalId);
      if (modal) {
        modal.remove();
        this.modals.delete(modalId);
      }
    },

    async alert(message, title = 'Información') {
      return new Promise(resolve => {
        const modalId = this.createModal({
          type: 'alert',
          title,
          message,
          buttons: [
            {
              text: 'Aceptar',
              class: 'btn-primary',
              action: () => {
                this.closeModal(modalId);
                resolve();
              },
            },
          ],
        });
      });
    },

    async confirm(message, title = 'Confirmación') {
      return new Promise(resolve => {
        const modalId = this.createModal({
          type: 'confirm',
          title,
          message,
          buttons: [
            {
              text: 'Cancelar',
              class: 'btn-secondary',
              action: () => {
                this.closeModal(modalId);
                resolve(false);
              },
            },
            {
              text: 'Aceptar',
              class: 'btn-primary',
              action: () => {
                this.closeModal(modalId);
                resolve(true);
              },
            },
          ],
        });
      });
    },

    async prompt(message, defaultValue = '', title = 'Entrada de datos') {
      return new Promise(resolve => {
        const modalId = this.createModal({
          type: 'prompt',
          title,
          message,
          defaultValue,
          buttons: [
            {
              text: 'Cancelar',
              class: 'btn-secondary',
              action: () => {
                this.closeModal(modalId);
                resolve(null);
              },
            },
            {
              text: 'Aceptar',
              class: 'btn-primary',
              action: () => {
                const input = document.querySelector(`#${modalId} .modal-input`);
                const value = input ? input.value : null;
                this.closeModal(modalId);
                resolve(value);
              },
            },
          ],
        });
      });
    },

    async counterOfferModal(courseName, currentPrice, isStudent = false, tutorPrice = null) {
      return new Promise(resolve => {
        const title = isStudent ? 'Nueva Contraoferta' : 'Contraoferta';
        let message = `<div>
          <div style="display: flex; align-items: center; gap: 0.4rem; padding: 0.5rem; background: #f8fafc; border-radius: 3px; border-left: 2px solid #6366f1; margin-bottom: 0.5rem;">
            <i class="fas fa-book" style="color: #6366f1; font-size: 0.8rem;"></i>
            <span style="font-size: 0.8rem; color: #1e293b; font-weight: 600;">${courseName}</span>
          </div>`;

        if (isStudent && tutorPrice) {
          message += `
          <div style="display: flex; flex-direction: column; gap: 0.3rem; margin-bottom: 0.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.3rem 0.5rem; background: #fefce8; border: 1px solid #facc15; border-radius: 3px;">
              <span style="font-size: 0.7rem; color: #64748b;">Tu oferta:</span>
              <span style="font-weight: 600; font-size: 0.75rem; color: #1e293b;">S/ ${currentPrice}/h</span>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.3rem 0.5rem; background: #eff6ff; border: 1px solid #3b82f6; border-radius: 3px;">
              <span style="font-size: 0.7rem; color: #64748b;">Contraoferta:</span>
              <span style="font-weight: 600; font-size: 0.75rem; color: #1e293b;">S/ ${tutorPrice}/h</span>
            </div>
          </div>`;
        } else {
          message += `
          <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.3rem 0.5rem; background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 3px; margin-bottom: 0.5rem;">
            <span style="font-size: 0.7rem; color: #64748b;">Oferta actual:</span>
            <span style="font-weight: 600; font-size: 0.75rem; color: #1e293b;">S/ ${currentPrice}/h</span>
          </div>`;
        }

        message += `
          <div>
            <label style="display: block; font-weight: 500; color: #374151; font-size: 0.75rem; margin-bottom: 0.3rem;">Tu contraoferta:</label>
            <div style="display: flex; align-items: center; border: 1px solid #d1d5db; border-radius: 3px; overflow: hidden;">
              <span style="background: #f9fafb; padding: 0.35rem 0.4rem; font-weight: 500; color: #374151; border-right: 1px solid #e5e7eb; font-size: 0.75rem;">S/</span>
              <input type="number" class="modal-input price-input" value="${isStudent ? tutorPrice - 2 : currentPrice + 5}" min="1" step="0.50" style="border: none; padding: 0.35rem; flex: 1; font-size: 0.8rem; text-align: center; font-weight: 500; outline: none;">
              <span style="background: #f9fafb; padding: 0.35rem 0.4rem; font-size: 0.7rem; color: #6b7280; border-left: 1px solid #e5e7eb;">/h</span>
            </div>
          </div>
        </div>`;

        const modalId = this.createModal({
          type: 'counter-offer',
          title,
          message,
          customClass: 'counter-offer-modal',
          buttons: [
            {
              text: 'Cancelar',
              class: 'btn-secondary',
              action: () => {
                this.closeModal(modalId);
                resolve(null);
              },
            },
            {
              text: 'Enviar Contraoferta',
              class: 'btn-primary',
              action: () => {
                const input = document.querySelector(`#${modalId} .price-input`);
                const value = input ? parseFloat(input.value) : null;

                if (!value || value <= 0) {
                  alert('Debe ser un número mayor a 0');
                  return;
                }

                this.closeModal(modalId);
                resolve(value);
              },
            },
          ],
        });
      });
    },

    async confirmCounterOffer(courseName, finalPrice, isAcceptance = true) {
      return new Promise(resolve => {
        const title = isAcceptance ? 'Confirmar Aceptación' : 'Confirmar Rechazo';
        const message = `
          <div>
            <div style="display: flex; align-items: center; gap: 0.4rem; padding: 0.5rem; background: #f8fafc; border-radius: 3px; border-left: 2px solid #6366f1; margin-bottom: 0.5rem;">
              <i class="fas fa-book" style="color: #6366f1; font-size: 0.8rem;"></i>
              <span style="font-size: 0.8rem; color: #1e293b; font-weight: 600;">${courseName}</span>
            </div>
            <div style="display: flex; align-items: flex-start; gap: 0.5rem; padding: 0.5rem; border-radius: 3px; border: 1px solid; ${isAcceptance ? 'background: #f0fdf4; border-color: #bbf7d0;' : 'background: #fef2f2; border-color: #fecaca;'}">
              <i class="fas fa-${isAcceptance ? 'check-circle' : 'times-circle'}" style="font-size: 0.9rem; margin-top: 0.05rem; color: ${isAcceptance ? '#16a34a' : '#dc2626'};"></i>
              <div style="flex: 1;">
                <p style="margin: 0 0 0.3rem 0; line-height: 1.3; font-size: 0.75rem;">Vas a <strong>${isAcceptance ? 'aceptar' : 'rechazar'}</strong> la contraoferta</p>
                ${
                  isAcceptance
                    ? `<p style="margin: 0 0 0.3rem 0; font-size: 0.8rem; color: #16a34a;">Precio final: <strong>S/ ${finalPrice}/h</strong></p>
                     <p style="margin: 0; font-size: 0.65rem; color: #6b7280; font-style: italic;">Confirmará la tutoría</p>`
                    : `<p style="margin: 0; font-size: 0.65rem; color: #6b7280; font-style: italic;">Terminará la negociación</p>`
                }
              </div>
            </div>
          </div>
        `;

        const modalId = this.createModal({
          type: 'confirmation',
          title,
          message,
          customClass: `confirmation-modal ${isAcceptance ? 'accept' : 'reject'}`,
          buttons: [
            {
              text: 'Cancelar',
              class: 'btn-secondary',
              action: () => {
                this.closeModal(modalId);
                resolve(false);
              },
            },
            {
              text: isAcceptance ? 'Confirmar Aceptación' : 'Confirmar Rechazo',
              class: isAcceptance ? 'btn-success' : 'btn-danger',
              action: () => {
                this.closeModal(modalId);
                resolve(true);
              },
            },
          ],
        });
      });
    },

    createModal({ type, title, message, defaultValue = '', buttons = [], customClass = '' }) {
      this.init(); // Asegurar que el contenedor existe

      const modalId = `modal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      this.currentZIndex += 10;

      const overlay = document.createElement('div');
      overlay.className = `modal-overlay ${type}-modal ${customClass}`;
      overlay.id = modalId;
      overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(2px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: ${this.currentZIndex};
        pointer-events: all;
        opacity: 0;
        transition: opacity 0.3s ease;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      `;

      const modal = document.createElement('div');
      modal.className = `modal ${type}`;
      modal.setAttribute(
        'style',
        `
        background: white;
        border-radius: 8px;
        width: 400px;
        max-width: 90vw;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transform: scale(0.95);
        transition: transform 0.2s ease;
      `
      );

      // Header del modal
      const header = document.createElement('div');
      header.setAttribute(
        'style',
        `
        padding: 20px 24px 16px;
        border-bottom: 1px solid #e5e7eb;
      `
      );
      header.innerHTML = `
        <h3 style="margin: 0; color: #111827; font-size: 18px; font-weight: 600;">
          ${title}
        </h3>
      `;

      // Cuerpo del modal
      const body = document.createElement('div');
      body.setAttribute('style', 'display: flex; flex-direction: column;');

      // Contenido del mensaje
      const messageEl = document.createElement('div');
      messageEl.setAttribute(
        'style',
        `
        padding: 16px 24px;
        color: #374151;
        line-height: 1.5;
        font-size: 14px;
      `
      );
      messageEl.innerHTML = message;

      // Input para prompt
      if (type === 'prompt') {
        const inputGroup = document.createElement('div');
        inputGroup.setAttribute('style', 'padding: 0 24px 16px;');

        const input = document.createElement('input');
        input.type = 'text';
        input.className = 'modal-input';
        input.value = defaultValue;
        input.setAttribute(
          'style',
          `
          width: 100%;
          padding: 8px 12px;
          border: 1px solid #d1d5db;
          border-radius: 6px;
          font-size: 14px;
          outline: none;
          box-sizing: border-box;
        `
        );

        input.addEventListener('focus', () => {
          input.style.borderColor = '#6366f1';
          input.style.boxShadow = '0 0 0 3px rgba(99, 102, 241, 0.1)';
        });

        input.addEventListener('blur', () => {
          input.style.borderColor = '#d1d5db';
          input.style.boxShadow = 'none';
        });

        inputGroup.appendChild(input);
        body.appendChild(header);
        body.appendChild(messageEl);
        body.appendChild(inputGroup);
      } else {
        body.appendChild(header);
        body.appendChild(messageEl);
      }

      // Footer con botones
      const footer = document.createElement('div');
      footer.setAttribute(
        'style',
        `
        padding: 16px 24px 20px;
        display: flex;
        gap: 8px;
        justify-content: flex-end;
        border-top: 1px solid #e5e7eb;
      `
      );

      buttons.forEach(button => {
        const btn = document.createElement('button');
        btn.textContent = button.text;
        btn.className = `modal-btn ${button.class}`;
        btn.style.cssText = this.getButtonStyles(button.class);
        btn.addEventListener('click', button.action);
        footer.appendChild(btn);
      });

      body.appendChild(footer);
      modal.appendChild(body);
      overlay.appendChild(modal);

      // Cerrar con ESC o click fuera
      overlay.addEventListener('click', e => {
        if (e.target === overlay) {
          buttons[0]?.action(); // Ejecutar acción del primer botón (cancelar)
        }
      });

      const handleEsc = e => {
        if (e.key === 'Escape' && this.modals.has(modalId)) {
          buttons[0]?.action();
          document.removeEventListener('keydown', handleEsc);
        }
      };
      document.addEventListener('keydown', handleEsc);

      // Agregar al contenedor y mostrar
      const container = document.getElementById('modal-container');
      container.appendChild(overlay);
      this.modals.set(modalId, overlay);

      // Animar entrada
      requestAnimationFrame(() => {
        overlay.style.opacity = '1';
        modal.style.transform = 'scale(1) translateY(0)';
      });

      // Focus en input si existe
      setTimeout(() => {
        const input = overlay.querySelector('.modal-input');
        if (input) {
          input.focus();
          if (input.type === 'text') {
            input.select();
          }
        }
      }, 100);

      return modalId;
    },

    closeModal(modalId) {
      const modal = this.modals.get(modalId);
      if (modal) {
        modal.style.opacity = '0';
        modal.querySelector('.modal').style.transform = 'scale(0.9) translateY(20px)';

        setTimeout(() => {
          if (modal.parentNode) {
            modal.remove();
          }
          this.modals.delete(modalId);
        }, 300);
      }
    },

    getButtonStyles(className) {
      const baseStyles = `
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 70px;
        font-family: inherit;
        display: inline-flex;
        align-items: center;
        justify-content: center;
      `;

      const variants = {
        'btn-primary': `
          background: #6366f1;
          color: white;
        `,
        'btn-secondary': `
          background: #f1f5f9;
          color: #475569;
          border: 1px solid #d1d5db;
        `,
        'btn-success': `
          background: #10b981;
          color: white;
        `,
        'btn-danger': `
          background: #ef4444;
          color: white;
        `,
      };

      return baseStyles + (variants[className] || variants['btn-secondary']);
    },

    // Función de emergencia para limpiar todos los overlays sin tocar header
    emergencyCleanup() {
      console.log('🚨 LIMPIEZA DE EMERGENCIA - Eliminando overlays blancos');
      this.cleanupWhiteOverlay();

      // También agregar a botones de acción rápida
      setTimeout(() => {
        console.log('🔄 Verificando limpieza después de 1 segundo...');
        this.cleanupWhiteOverlay();
      }, 1000);
    },
  };

  console.log('ModalManager embebido completo listo');

  // ===== SISTEMA DE AUTENTICACIÓN =====

  // Sistema de autenticación - usa el global del Layout

  // Crear instancia global (usa el auth global)
  // window.auth ya está disponible desde el Layout

  // Asegurar que existen usuarios demo
  function ensureDemoUsers() {
    if (!window.auth) return false;
    const users = window.auth.getUsers();
    if (users.length === 0) {
      // Redirigir a la página principal para inicializar datos
      window.location.href = baseUrl + '/';
      return false;
    }
    return true;
  }

  // Cargar datos del usuario al cargar la página
  document.addEventListener('DOMContentLoaded', function () {
    // PRIMERA PRIORIDAD: Limpiar overlays blancos al cargar
    setTimeout(() => {
      if (window.modalManager && window.modalManager.cleanupWhiteOverlay) {
        console.log('🧹 Limpieza automática al cargar página');
        window.modalManager.cleanupWhiteOverlay();
      }
    }, 500);

    // Esperar a que el auth global esté disponible
    setTimeout(() => {
      loadUserData();
    }, 100);

    // Escuchar eventos de notificaciones para recargar automáticamente
    window.addEventListener('hermesNotificationCreated', function (event) {
      const currentUser = window.auth?.getCurrentUser();
      if (currentUser && event.detail.userId === currentUser.id) {
        console.log('Recibida notificación, recargando dashboard...', event.detail);
        // Mostrar un mensaje temporal
        showTemporaryMessage(event.detail.type, event.detail.notification);
        // Recargar datos después de un breve delay
        setTimeout(() => {
          loadUserData();
        }, 1000);
      }
    });
  });
  function loadUserData() {
    // Asegurar que existen usuarios demo
    if (!ensureDemoUsers()) {
      return;
    }

    const user = window.auth.getCurrentUser();

    if (!user) {
      window.location.href = `${baseUrl}/auth`;
      return;
    }

    // Actualizar nombre del usuario
    const userNameElement = document.getElementById('userName');
    if (userNameElement && user) {
      let displayName = '¡Hola, Usuario!';

      if (user.profile && user.profile.fullName) {
        displayName = `¡Hola, ${user.profile.fullName}!`;
      } else if (user.email) {
        const emailName = user.email.split('@')[0];
        displayName = `¡Hola, ${emailName}!`;
      }

      userNameElement.textContent = displayName;
      console.log('Nombre de usuario actualizado:', displayName);
    }

    // IMPORTANTE: Configurar el layout ANTES de cargar las solicitudes
    // Si el usuario es tutor, cargar también solicitudes entrantes
    if (user.roles && user.roles.isTutor) {
      showTutorModule(user);
      setTutorLayout();
      loadTutorRequests(user);
    } else {
      showApplyTutorButton();
      setStudentOnlyLayout();
    }

    // Cargar solicitudes del estudiante DESPUÉS de configurar el layout
    loadStudentRequests(user);
  }

  // Función para cargar solicitudes del estudiante
  function loadStudentRequests(user) {
    console.log('loadStudentRequests called with user:', user);
    console.log('DEBUG - User ID:', user.id, 'Type:', typeof user.id);

    // Obtener solicitudes del localStorage
    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    console.log('All requests for student check:', requests);

    // Debug: mostrar todos los studentId para comparar
    console.log(
      'DEBUG - Student IDs in requests:',
      requests.map(req => ({
        id: req.studentId,
        type: typeof req.studentId,
        status: req.status,
        equals: req.studentId === user.id,
        equalsLoose: req.studentId == user.id,
      }))
    );

    // Filtrar solicitudes del usuario que estén pendientes o con contraoferta
    const userRequests = requests.filter(
      req => req.studentId == user.id && (req.status === 'pending' || req.status === 'counter_offer')
    );

    console.log('User pending requests:', userRequests);

    // Determinar qué layout está activo y usar los elementos correctos
    const studentOnlyContainer = document.getElementById('studentOnlyContainer');
    const isStudentOnlyLayout = studentOnlyContainer && studentOnlyContainer.style.display !== 'none';

    let requestsList, requestsCount;

    if (isStudentOnlyLayout) {
      // Layout solo estudiante
      requestsList = document.getElementById('requestsList');
      requestsCount = document.getElementById('requestsCount');
      console.log('DEBUG - Usando layout solo estudiante');
    } else {
      // Layout con tutor
      requestsList = document.getElementById('requestsList2');
      requestsCount = document.getElementById('requestsCount2');
      console.log('DEBUG - Usando layout con tutor');
    }

    console.log('DEBUG - DOM Elements:', {
      requestsList: requestsList,
      requestsCount: requestsCount,
      requestsListExists: !!requestsList,
      requestsCountExists: !!requestsCount,
      isStudentOnlyLayout: isStudentOnlyLayout,
    });

    if (!requestsList || !requestsCount) {
      console.error('ERROR - No se encontraron elementos DOM necesarios para el layout activo');
      return;
    }

    console.log('DEBUG - UserRequests length:', userRequests.length);

    if (userRequests.length === 0) {
      console.log('DEBUG - No hay solicitudes, estableciendo contador a 0');
      requestsCount.textContent = '0';
      return; // Mantener el estado vacío por defecto
    }

    // Actualizar contador
    requestsCount.textContent = userRequests.length;
    console.log('DEBUG - Contador actualizado a:', userRequests.length);

    // Limpiar lista y agregar solicitudes
    requestsList.innerHTML = '';
    console.log('DEBUG - Lista limpiada, empezando renderizado...');

    userRequests.forEach((request, index) => {
      console.log(`DEBUG - Renderizando solicitud ${index}:`, request);
      try {
        const requestItem = document.createElement('div');
        requestItem.className = 'pending-request-item';
        requestItem.setAttribute('data-request-id', request.id);

        // Obtener información del curso y tutor
        const courseName = request.courseName || getCourseName(request.courseId);
        const tutorName = getTutorName(request.tutorId);

        console.log(`DEBUG - Solicitud ${index} - Curso: ${courseName}, Tutor: ${tutorName}`);

        // Determinar el estado visual
        let statusText, statusStyles;
        if (request.status === 'pending') {
          statusText = 'Pendiente';
          statusStyles = 'background: #fef3c7; color: #d97706;';
        } else if (request.status === 'counter_offer') {
          statusText = 'Contraoferta';
          statusStyles = 'background: #dbeafe; color: #2563eb;';
        }

        // Crear lista de sesiones programadas
        const sessionsHtml = request.scheduledSessions
          ? request.scheduledSessions
              .map(
                session =>
                  `<div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b; margin-bottom: 0.125rem;">
            <i class="fas fa-calendar" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>${session.day} ${session.time} - ${session.endTime}</span>
          </div>`
              )
              .join('')
          : `<div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-calendar" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>${request.sessionDay} ${request.sessionTime}</span>
          </div>`;

        const sessionsCount = request.scheduledSessions ? request.scheduledSessions.length : 1;

        requestItem.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.25rem;">
          <div>
            <div style="font-size: 0.875rem; font-weight: 600; color: #1e293b; margin: 0;">${courseName}</div>
            <div style="font-size: 0.75rem; color: #64748b; margin: 0;">Tutor: ${tutorName}</div>
          </div>
          <span style="padding: 0.125rem 0.375rem; border-radius: 3px; font-size: 0.625rem; font-weight: 500; ${statusStyles}">${statusText}</span>
        </div>
        <div style="display: flex; flex-direction: column; gap: 0.25rem;">
          <div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b; margin-bottom: 0.25rem;">
            <i class="fas fa-clock" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>${sessionsCount} sesión(es) programada(s)</span>
          </div>
          ${sessionsHtml}
          <div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-dollar-sign" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>S/ ${request.studentOfferedPrice}/hora</span>
          </div>
          ${
            request.status === 'counter_offer' && request.tutorCounterPrice
              ? `
          <div style="display: flex; align-items: center; gap: 0.25rem; font-size: 0.75rem; color: #64748b;">
            <i class="fas fa-handshake" style="width: 12px; color: #9ca3af; font-size: 0.625rem;"></i>
            <span>Contraoferta: S/ ${request.tutorCounterPrice}/hora</span>
          </div>
          <div style="display: flex; gap: 0.5rem; margin-top: 0.75rem; flex-wrap: wrap;">
            <button class="student-action-btn btn-accept" onclick="acceptCounterOffer('${request.id}')">
              <i class="fas fa-check"></i> Aceptar
            </button>
            <button class="student-action-btn btn-counter" onclick="openStudentCounterModal('${request.id}', ${request.tutorCounterPrice})">
              <i class="fas fa-handshake"></i> Contraoferta
            </button>
            <button class="student-action-btn btn-reject" onclick="rejectCounterOffer('${request.id}')">
              <i class="fas fa-times"></i> Rechazar
            </button>
          </div>
          `
              : ''
          }
        </div>
      `;
        requestsList.appendChild(requestItem);
        console.log(`Solicitud ${index} agregada exitosamente al DOM`);
      } catch (error) {
        console.error(`Error renderizando solicitud ${index}:`, error);
      }
    });

    console.log('DEBUG - Renderizado completado. Total elementos en lista:', requestsList.children.length);
    console.log('Finished rendering all pending requests');
  }

  // Funciones auxiliares para obtener nombres de curso y tutor
  function getCourseName(courseId) {
    // Verificar si courseId es válido
    if (!courseId && courseId !== 0) {
      console.warn('courseId is null, undefined or invalid:', courseId);
      return 'Curso no especificado';
    }

    // Datos de cursos (versión simplificada para el frontend - UTEC)
    const courses = [
      { id: 1, name: 'Cálculo de una Variable' },
      { id: 2, name: 'Introducción a la Mecánica' },
      { id: 3, name: 'Química General' },
      { id: 18, name: 'Ecuaciones Diferenciales' },
    ];

    const course = courses.find(c => c.id.toString() === courseId.toString());
    return course ? course.name : `Curso ID: ${courseId}`;
  }

  function getTutorName(tutorId) {
    // Verificar si tutorId es válido
    if (!tutorId && tutorId !== 0) {
      console.warn('tutorId is null, undefined or invalid:', tutorId);
      return 'Tutor no especificado';
    }

    // Datos de tutores (versión simplificada para el frontend)
    const tutors = [
      { id: 1, name: 'María Elena González Vargas' },
      { id: 2, name: 'Jorge Ramírez Silva' },
      { id: 3, name: 'Carlos Alberto Mendoza Torres' },
      { id: 4, name: 'Ana Patricia Flores Castillo' },
      { id: 5, name: 'Luis Fernando Castro Delgado' },
    ];

    const tutor = tutors.find(t => t.id.toString() === tutorId.toString());
    return tutor ? tutor.name : `Tutor ID: ${tutorId}`;
  }

  // Función global para depurar solicitudes
  window.debugRequests = function () {
    console.log('=== DEBUG SOLICITUDES ===');
    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    console.log('Total requests:', requests.length);
    console.log('Requests:', requests);

    const user = window.auth?.getCurrentUser();
    console.log('Current user:', user);
    console.log('Current user ID:', user?.id, 'Type:', typeof user?.id);

    if (user) {
      const userRequests = requests.filter(
        req => req.studentId == user.id && (req.status === 'pending' || req.status === 'counter_offer')
      );
      console.log('User pending requests (loose equality):', userRequests);

      const userRequestsStrict = requests.filter(
        req => req.studentId === user.id && (req.status === 'pending' || req.status === 'counter_offer')
      );
      console.log('User pending requests (strict equality):', userRequestsStrict);

      // Mostrar comparaciones detalladas
      requests.forEach((req, index) => {
        console.log(
          `Request ${index}: studentId=${req.studentId} (${typeof req.studentId}) vs userId=${user.id} (${typeof user.id}) - Equals: ${req.studentId === user.id} | LooseEquals: ${req.studentId == user.id}`
        );
      });
    }

    // Debugging del DOM
    console.log('=== DEBUG DOM ===');

    // Detectar layout activo y usar elementos correctos
    const studentOnlyContainer = document.getElementById('studentOnlyContainer');
    const isStudentOnlyLayout = studentOnlyContainer && studentOnlyContainer.style.display !== 'none';

    let requestsList, requestsCount;

    if (isStudentOnlyLayout) {
      requestsList = document.getElementById('requestsList');
      requestsCount = document.getElementById('requestsCount');
      console.log('Layout activo: Solo estudiante');
    } else {
      requestsList = document.getElementById('requestsList2');
      requestsCount = document.getElementById('requestsCount2');
      console.log('Layout activo: Con tutor');
    }

    console.log('requestsList element:', requestsList);
    console.log('requestsCount element:', requestsCount);
    console.log('Lista innerHTML:', requestsList?.innerHTML);
    console.log('Lista children count:', requestsList?.children.length);
    console.log('Contador textContent:', requestsCount?.textContent);

    console.log('========================');
  };

  // Función para forzar recarga de datos
  window.forceReloadRequests = function () {
    console.log('Forzando recarga de solicitudes...');
    const user = window.auth?.getCurrentUser();
    if (user) {
      loadStudentRequests(user);
      console.log('Recarga completada');
    } else {
      console.error('No hay usuario logueado');
    }
  };

  // Función global para crear solicitud de prueba
  window.createTestRequest = function () {
    const user = window.auth?.getCurrentUser();
    if (!user) {
      console.log('No hay usuario logueado');
      return;
    }

    const testRequest = {
      id: 'REQ_TEST_' + Date.now(),
      studentId: user.id,
      tutorId: 2, // Jorge Ramírez Silva
      courseId: 3, // Química General
      studentOfferedPrice: 35,
      sessionDay: 'Lunes',
      sessionTime: '14:00',
      sessionEndTime: '15:00',
      duration: 60,
      status: 'pending',
      message: 'Solicitud de prueba para verificar el sistema',
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
    };

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    requests.push(testRequest);
    localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

    console.log('Solicitud de prueba creada:', testRequest);

    // Recargar datos
    loadUserData();
  };

  // Función para limpiar solicitudes problemáticas
  window.clearInvalidRequests = function () {
    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const validRequests = requests.filter(
      req => req.tutorId != null && req.courseId != null && req.studentId != null && req.status
    );

    console.log('Solicitudes antes:', requests.length);
    console.log('Solicitudes válidas:', validRequests.length);

    localStorage.setItem('hermesTutoringRequests', JSON.stringify(validRequests));

    // Recargar datos
    loadUserData();

    console.log('Solicitudes inválidas eliminadas');
  };

  // Función para cargar solicitudes entrantes del tutor
  function loadTutorRequests(user) {
    console.log('loadTutorRequests called with user:', user);

    // Obtener solicitudes del localStorage
    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    console.log('All requests for tutor check:', requests);

    // Filtrar solicitudes dirigidas a este tutor que estén pendientes
    const tutorRequests = requests.filter(req => req.tutorId === user.id && req.status === 'pending');

    console.log('Tutor incoming requests:', tutorRequests);

    const tutorRequestsList = document.getElementById('tutorRequestsList');
    const tutorRequestsCount = document.getElementById('tutorRequestsCount');

    if (!tutorRequestsList || !tutorRequestsCount) return;

    if (tutorRequests.length === 0) {
      tutorRequestsCount.textContent = '0';
      return; // Mantener el estado vacío por defecto
    }

    // Actualizar contador
    tutorRequestsCount.textContent = tutorRequests.length;

    // Limpiar lista y agregar solicitudes
    tutorRequestsList.innerHTML = '';

    tutorRequests.forEach((request, index) => {
      console.log(`Rendering tutor request ${index}:`, request);
      const requestItem = document.createElement('div');
      requestItem.className = 'tutor-request-item';

      // Obtener información del curso y estudiante
      const courseName = request.courseName || getCourseName(request.courseId);
      const studentName = getStudentName(request.studentId);

      // Crear lista de sesiones programadas (igual que en el panel del estudiante)
      const sessionsHtml = request.scheduledSessions
        ? request.scheduledSessions
            .map(
              session =>
                `<div class="tutor-request-detail-item">
            <i class="fas fa-calendar"></i>
            <span>${session.day} ${session.time} - ${session.endTime || (session.time.split(':')[0] && String(parseInt(session.time.split(':')[0]) + 1).padStart(2, '0') + ':00') || 'N/A'}</span>
          </div>`
            )
            .join('')
        : `<div class="tutor-request-detail-item">
            <i class="fas fa-calendar"></i>
            <span>${request.sessionDay} ${request.sessionTime}</span>
          </div>`;

      const sessionsCount = request.scheduledSessions ? request.scheduledSessions.length : 1;

      requestItem.innerHTML = `
        <div class="tutor-request-header">
          <div>
            <div class="tutor-request-course">${courseName}</div>
            <div class="tutor-request-student">Estudiante: ${studentName}</div>
            <div class="tutor-request-sessions-count">${sessionsCount} sesión(es) solicitada(s)</div>
          </div>
          <span class="tutor-request-price">S/ ${request.studentOfferedPrice}/h</span>
        </div>
        <div class="tutor-request-details">
          ${sessionsHtml}
          ${
            request.message
              ? `
          <div class="tutor-request-detail-item">
            <i class="fas fa-comment"></i>
            <span>${request.message}</span>
          </div>
          `
              : ''
          }
          <div class="tutor-request-detail-item">
            <i class="fas fa-calculator"></i>
            <span>Total estimado: S/ ${(request.studentOfferedPrice || 0) * sessionsCount}</span>
          </div>
        </div>
        <div class="tutor-request-actions">
          <button class="tutor-action-btn btn-accept" onclick="acceptRequest('${request.id}')">
            <i class="fas fa-check"></i>
            Aceptar
          </button>
          <button class="tutor-action-btn btn-counter" onclick="counterOffer('${request.id}')">
            <i class="fas fa-handshake"></i>
            Contraoferta
          </button>
          <button class="tutor-action-btn btn-reject" onclick="rejectRequest('${request.id}')">
            <i class="fas fa-times"></i>
            Rechazar
          </button>
        </div>
      `;

      tutorRequestsList.appendChild(requestItem);
      console.log(`Added tutor request item ${index} to the list`);
    });

    console.log('Finished rendering all tutor requests');
  }

  // Función auxiliar para obtener nombre del estudiante
  function getStudentName(studentId) {
    // Verificar si studentId es válido
    if (!studentId && studentId !== 0) {
      console.warn('studentId is null, undefined or invalid:', studentId);
      return 'Estudiante no especificado';
    }

    // Por ahora usamos el sistema de autenticación para obtener el nombre
    const users = window.auth?.getUsers() || [];
    const student = users.find(u => u.id === studentId);

    if (student && student.profile && student.profile.fullName) {
      return student.profile.fullName;
    } else if (student && student.email) {
      return student.email.split('@')[0]; // Usar parte del email como nombre
    }

    return `Estudiante ID: ${studentId}`;
  }

  // Funciones para gestionar solicitudes del tutor
  window.acceptRequest = async function (requestId) {
    console.log('Accepting request:', requestId);
    console.log('Type of requestId:', typeof requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const requestIndex = requests.findIndex(req => req.id == requestId); // Usar == en lugar de ===

    if (requestIndex !== -1) {
      const request = requests[requestIndex];
      const courseName = request.courseName || getCourseName(request.courseId);
      const studentName = getStudentName(request.studentId);

      // Usar modal de confirmación en lugar de alert directo
      const confirmed = await window.modalManager?.confirm(
        `¿Confirmas que aceptas la solicitud de tutoría?\n\nCurso: ${courseName}\nEstudiante: ${studentName}\nPrecio: S/ ${request.studentOfferedPrice}/hora`,
        'Confirmar Aceptación'
      );

      if (confirmed) {
        requests[requestIndex].status = 'accepted';
        requests[requestIndex].lastUpdated = new Date().toISOString();

        localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

        // Crear notificación para el estudiante
        createNotificationForStudent(requests[requestIndex], 'accepted');

        await window.modalManager?.alert('Solicitud aceptada exitosamente! El estudiante será notificado.', 'Éxito');

        // Mostrar toast de éxito
        showToast('Solicitud aceptada! El estudiante será notificado', 'success');

        loadUserData(); // Recargar datos
      }
    }
  };

  window.rejectRequest = async function (requestId) {
    console.log('Rejecting request:', requestId);
    console.log('Type of requestId:', typeof requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const request = requests.find(req => req.id == requestId);

    if (!request) {
      await window.modalManager?.alert('Error: No se encontró la solicitud', 'Error');
      return;
    }

    const courseName = request.courseName || getCourseName(request.courseId);
    const studentName = getStudentName(request.studentId);

    const confirmed = await window.modalManager?.confirm(
      `¿Confirmas que quieres rechazar esta solicitud?\n\nCurso: ${courseName}\nEstudiante: ${studentName}\n\nEsta acción no se puede deshacer.`,
      'Confirmar Rechazo'
    );

    if (confirmed) {
      const requestIndex = requests.findIndex(req => req.id == requestId);
      requests[requestIndex].status = 'rejected';
      requests[requestIndex].lastUpdated = new Date().toISOString();

      localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

      // Crear notificación para el estudiante
      createNotificationForStudent(requests[requestIndex], 'rejected');

      await window.modalManager?.alert('Solicitud rechazada. El estudiante será notificado.', 'Rechazada');

      // Mostrar toast informativo
      showToast('Solicitud rechazada', 'warning');

      loadUserData(); // Recargar datos
    }
  };
  window.counterOffer = async function (requestId) {
    console.log('Opening counter offer for request:', requestId);
    console.log('Type of requestId:', typeof requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    console.log('All requests:', requests);
    console.log(
      'Request IDs:',
      requests.map(req => ({ id: req.id, type: typeof req.id }))
    );

    const request = requests.find(req => req.id == requestId); // Usar == en lugar de === para permitir coerción de tipos

    if (!request) {
      console.error('No se encontró la solicitud con ID:', requestId);
      console.error(
        'IDs disponibles:',
        requests.map(req => req.id)
      );
      await window.modalManager?.alert('Error: No se encontró la solicitud', 'Error');
      return;
    }

    // Obtener información del curso y precio actual
    const currentPrice = request.studentOfferedPrice;
    const courseName = request.courseName || getCourseName(request.courseId);

    // Usar modal personalizado de contraoferta
    const newPrice = await window.modalManager?.counterOfferModal(courseName, currentPrice, false);

    if (newPrice === null) {
      // Usuario canceló
      return;
    }

    if (!newPrice || isNaN(newPrice) || parseFloat(newPrice) <= 0) {
      await window.modalManager?.alert('Precio inválido. Debe ser un número mayor a 0.', 'Error de Validación');
      return;
    }

    const finalPrice = parseFloat(newPrice);
    const requestIndex = requests.findIndex(req => req.id == requestId); // Usar == en lugar de ===

    if (requestIndex !== -1) {
      requests[requestIndex].status = 'counter_offer';
      requests[requestIndex].tutorCounterPrice = finalPrice;
      requests[requestIndex].lastUpdated = new Date().toISOString();

      localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

      // Crear notificación para el estudiante
      createNotificationForStudent(requests[requestIndex], 'counter_offer');

      await window.modalManager?.alert(
        `¡Contraoferta enviada!\n\nTu oferta: S/ ${finalPrice}/hora\nEl estudiante recibirá una notificación.`,
        'Contraoferta Enviada'
      );

      // Mostrar toast de éxito
      showToast(`Contraoferta enviada: S/ ${finalPrice}/hora`, 'info');

      // Recargar datos
      setTimeout(() => {
        loadUserData();
      }, 100);
    }
  };

  async function createNotificationForStudent(request, action) {
    const notifications = JSON.parse(localStorage.getItem('hermesNotifications') || '[]');

    let title, message;
    switch (action) {
      case 'accepted':
        title = 'Solicitud aceptada';
        message = 'Tu solicitud de tutoría ha sido aceptada';
        break;
      case 'rejected':
        title = 'Solicitud rechazada';
        message = 'Tu solicitud de tutoría ha sido rechazada';
        break;
      case 'counter_offer':
        title = 'Contraoferta recibida';
        message = `El tutor ha hecho una contraoferta: S/ ${request.tutorCounterPrice}/hora`;
        break;
      default:
        title = 'Actualización de solicitud';
        message = 'Tu solicitud de tutoría ha sido actualizada';
    }

    const newNotification = {
      id: 'NOTIF_' + Date.now(),
      userId: request.studentId,
      type: action,
      title: title,
      message: message,
      data: {
        requestId: request.id,
        tutorId: request.tutorId,
        courseId: request.courseId,
      },
      read: false,
      createdAt: new Date().toISOString(),
    };
    notifications.push(newNotification);
    localStorage.setItem('hermesNotifications', JSON.stringify(notifications));

    // Log para confirmar que se creó la notificación
    console.log('Notificación creada para estudiante:', newNotification);

    // Solo mostrar toast, sin modal que interrumpa el flujo
    showToast(`Notificación enviada: ${title}`, 'info');

    // Trigger event para actualizar otros dashboards que puedan estar abiertos
    window.dispatchEvent(
      new CustomEvent('hermesNotificationCreated', {
        detail: { userId: request.studentId, type: action, notification: newNotification },
      })
    );
  }

  // ===== FUNCIONES PARA RESPUESTAS DEL ESTUDIANTE A CONTRAOFERTA =====

  // Aceptar contraoferta del tutor
  window.acceptCounterOffer = async function (requestId) {
    console.log('Student accepting counter offer:', requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const requestIndex = requests.findIndex(req => req.id == requestId); // Usar == en lugar de ===

    if (requestIndex !== -1) {
      const request = requests[requestIndex];
      const finalPrice = request.tutorCounterPrice;
      const courseName = request.courseName || getCourseName(request.courseId);

      // Usar modal de confirmación personalizado
      const confirmed = await window.modalManager?.confirmCounterOffer(courseName, finalPrice, true);

      if (confirmed) {
        // Feedback visual inmediato en el elemento
        const requestElement = document.querySelector(`[data-request-id="${requestId}"]`);
        if (requestElement) {
          requestElement.style.background = '#dcfce7';
          requestElement.style.borderColor = '#16a34a';
          requestElement.innerHTML = `
            <div style="text-align: center; padding: 1rem; color: #166534;">
              <i class="fas fa-check-circle" style="font-size: 1.5rem; margin-bottom: 0.5rem;"></i>
              <p style="margin: 0; font-weight: 600;">Contraoferta Aceptada</p>
              <p style="margin: 0; font-size: 0.8rem;">Precio final: S/ ${finalPrice}/hora</p>
            </div>
          `;
        }

        // Crear la tutoría programada
        const user = window.auth?.getCurrentUser();
        if (user) {
          const newTutoring = {
            id: 'TUT_' + Date.now(),
            courseId: request.courseId,
            courseName: courseName,
            tutorId: request.tutorId,
            tutorName: getTutorName(request.tutorId),
            studentId: request.studentId,
            price: finalPrice,
            status: 'confirmed',
            date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // Próxima semana
            time: request.sessionTime || '14:00',
            duration: request.duration || 60,
            createdAt: new Date().toISOString(),
          };

          // Agregar a las tutorías programadas del usuario
          if (!user.scheduledTutorings) {
            user.scheduledTutorings = [];
          }
          user.scheduledTutorings.push(newTutoring);

          // Actualizar en localStorage
          const users = window.auth.getUsers();
          const userIndex = users.findIndex(u => u.id === user.id);
          if (userIndex !== -1) {
            users[userIndex] = user;
            localStorage.setItem('hermesUsers', JSON.stringify(users));
          }
        }

        // Eliminar la solicitud
        requests.splice(requestIndex, 1);
        localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

        // Crear notificación para el tutor
        createNotificationForTutor(requests[requestIndex], 'counter_accepted');

        // Mostrar toast de éxito
        showToast('Contraoferta aceptada! Moviendo a próximas tutorías...', 'success');

        // Actualizar después de un breve delay para mostrar el feedback visual
        setTimeout(() => {
          loadUserData();
        }, 2000);
      }
    }
  };

  // Rechazar contraoferta del tutor
  window.rejectCounterOffer = async function (requestId) {
    console.log('Student rejecting counter offer:', requestId);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const request = requests.find(req => req.id == requestId); // Usar == en lugar de ===

    if (!request) {
      await window.modalManager?.alert('Error: No se encontró la solicitud', 'Error');
      return;
    }

    const courseName = request.courseName || getCourseName(request.courseId);
    const tutorPrice = request.tutorCounterPrice;

    // Usar modal de confirmación personalizado
    const confirmed = await window.modalManager?.confirmCounterOffer(courseName, tutorPrice, false);

    if (confirmed) {
      const requestIndex = requests.findIndex(req => req.id == requestId); // Usar == en lugar de ===

      if (requestIndex !== -1) {
        // Feedback visual inmediato en el elemento
        const requestElement = document.querySelector(`[data-request-id="${requestId}"]`);
        if (requestElement) {
          requestElement.style.background = '#fee2e2';
          requestElement.style.borderColor = '#dc2626';
          requestElement.innerHTML = `
            <div style="text-align: center; padding: 1rem; color: #991b1b;">
              <i class="fas fa-times-circle" style="font-size: 1.5rem; margin-bottom: 0.5rem;"></i>
              <p style="margin: 0; font-weight: 600;">Contraoferta Rechazada</p>
              <p style="margin: 0; font-size: 0.8rem;">La negociación ha terminado</p>
            </div>
          `;
        }

        // Crear notificación para el tutor
        createNotificationForTutor(requests[requestIndex], 'counter_rejected');

        // Eliminar la solicitud
        requests.splice(requestIndex, 1);
        localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

        // Mostrar toast informativo
        showToast('Contraoferta rechazada. Solicitud eliminada.', 'warning');

        // Actualizar después de un breve delay para mostrar el feedback visual
        setTimeout(() => {
          loadUserData();
        }, 2000);
      }
    }
  };

  // Abrir contraoferta del estudiante
  window.openStudentCounterModal = async function (requestId, tutorPrice) {
    console.log('Opening student counter offer for request:', requestId, 'tutor price:', tutorPrice);

    const requests = JSON.parse(localStorage.getItem('hermesTutoringRequests') || '[]');
    const request = requests.find(req => req.id == requestId); // Usar == en lugar de ===

    if (!request) {
      await window.modalManager?.alert('Error: No se encontró la solicitud', 'Error');
      return;
    }

    const courseName = request.courseName || getCourseName(request.courseId);
    const originalPrice = request.studentOfferedPrice;

    // Usar modal personalizado de contraoferta para estudiante
    const newPrice = await window.modalManager?.counterOfferModal(courseName, originalPrice, true, tutorPrice);

    if (newPrice === null) {
      // Usuario canceló
      return;
    }

    if (!newPrice || isNaN(newPrice) || parseFloat(newPrice) <= 0) {
      await window.modalManager?.alert('Precio inválido. Debe ser un número mayor a 0.', 'Error de Validación');
      return;
    }

    const finalPrice = parseFloat(newPrice);
    const requestIndex = requests.findIndex(req => req.id == requestId); // Usar == en lugar de ===

    if (requestIndex !== -1) {
      requests[requestIndex].status = 'counter_offer';
      requests[requestIndex].studentCounterPrice = finalPrice;
      requests[requestIndex].lastUpdated = new Date().toISOString();

      localStorage.setItem('hermesTutoringRequests', JSON.stringify(requests));

      // Crear notificación para el tutor
      createNotificationForTutor(requests[requestIndex], 'student_counter');

      await window.modalManager?.alert(
        `¡Nueva contraoferta enviada!\n\nTu oferta: S/ ${finalPrice}/hora\nEl tutor recibirá una notificación.`,
        'Contraoferta Enviada'
      );

      // Mostrar toast informativo
      showToast('Contraoferta enviada al tutor', 'success');

      // Forzar actualización completa
      setTimeout(() => {
        loadUserData();
      }, 100);
    }
  };

  // Función para crear notificaciones para el tutor
  function createNotificationForTutor(request, action) {
    const notifications = JSON.parse(localStorage.getItem('hermesNotifications') || '[]');

    let title, message;
    switch (action) {
      case 'counter_accepted':
        title = 'Contraoferta Aceptada';
        message = `El estudiante aceptó tu contraoferta de S/ ${request.tutorCounterPrice}/hora para ${request.courseName || 'el curso'}`;
        break;
      case 'counter_rejected':
        title = 'Contraoferta Rechazada';
        message = `El estudiante rechazó tu contraoferta para ${request.courseName || 'el curso'}`;
        break;
      case 'student_counter':
        title = '🔄 Nueva Contraoferta';
        message = `El estudiante hizo una nueva contraoferta de S/ ${request.studentCounterPrice}/hora para ${request.courseName || 'el curso'}`;
        break;
    }

    const newNotification = {
      id: Date.now() + Math.random(),
      userId: request.tutorId,
      title: title,
      message: message,
      type: action,
      data: {
        requestId: request.id,
        courseId: request.courseId,
        price: action === 'student_counter' ? request.studentCounterPrice : request.tutorCounterPrice,
      },
      read: false,
      createdAt: new Date().toISOString(),
    };

    notifications.push(newNotification);
    localStorage.setItem('hermesNotifications', JSON.stringify(notifications));

    // Trigger event para actualizar otros dashboards que puedan estar abiertos
    window.dispatchEvent(
      new CustomEvent('hermesNotificationCreated', {
        detail: { userId: request.tutorId, type: action, notification: newNotification },
      })
    );
  }

  function showApplyTutorButton() {
    const applyTutorBtn = document.getElementById('applyTutorBtn');
    if (applyTutorBtn) {
      applyTutorBtn.style.display = 'flex';

      // Agregar evento click para redirigir a la página de aplicación
      applyTutorBtn.addEventListener('click', function () {
        window.location.href = `${baseUrl}/become-tutor`;
      });
    }
  }

  function showTutorModule(user) {
    // Mostrar elementos del header para tutores (solo badges)
    const tutorBadge = document.getElementById('tutorBadge');
    const tutorStatusText = document.getElementById('tutorStatusText');

    if (tutorBadge) {
      tutorBadge.style.display = 'flex';
    }
    if (tutorStatusText) {
      tutorStatusText.style.display = 'flex';
    }

    // Mostrar columna tutor
    const tutorColumn = document.getElementById('tutorColumn');
    if (tutorColumn) {
      tutorColumn.style.display = 'flex';
    }

    // Actualizar estado del tutor
    const statusElement = document.getElementById('tutorStatus');
    if (statusElement && user.roles.tutorStatus) {
      statusElement.textContent =
        user.roles.tutorStatus === 'approved'
          ? 'Verificado'
          : user.roles.tutorStatus === 'pending'
            ? 'Pendiente'
            : 'Rechazado';
      statusElement.className = `tutor-badge ${user.roles.tutorStatus}`;
    }

    // Actualizar información del tutor
    if (user.tutorProfile) {
      // Mostrar información del curso
      if (user.tutorProfile.courses && user.tutorProfile.courses.length > 0) {
        const course = user.tutorProfile.courses[0];
        const courseNameEl = document.getElementById('tutorCourseName');
        const courseCodeEl = document.getElementById('tutorCourseCode');

        if (courseNameEl) courseNameEl.textContent = course.courseName || '-';
        if (courseCodeEl) courseCodeEl.textContent = course.courseCode || '-';
      }

      // Actualizar estadísticas
      document.getElementById('tutorRating').textContent = user.tutorProfile.rating || '4.8';
      document.getElementById('tutorSessions').textContent = user.tutorProfile.totalSessions || '27';
      document.getElementById('tutorCourses').textContent = user.tutorProfile.courses
        ? user.tutorProfile.courses.length
        : '1';
    }
  }

  function manageCourses() {
    window.modalManager?.alert(
      'Esta función estará disponible próximamente.\n\nPermitirá:\n• Gestionar horarios disponibles\n• Configurar precios por curso\n• Establecer disponibilidad semanal',
      'Gestionar Horarios'
    );
  }

  function openTutorPanel() {
    // Modal o página dedicada al panel del tutor
    window.modalManager?.alert(
      'Funciones disponibles:\n\n• Gestionar solicitudes\n• Ver estadísticas de tutorías\n• Configurar horarios disponibles\n• Actualizar perfil profesional\n• Establecer precios por curso\n\n(Módulo en desarrollo...)',
      'Panel de Tutor'
    );
  }

  function joinTutoringSession(sessionId) {
    // Redirigir a la página de videollamada simulada
    window.location.href = `${baseUrl}/videocall`;
  }

  function goToMyCourses() {
    const user = window.auth?.getCurrentUser();

    if (!user) {
      window.location.href = `${baseUrl}/auth`;
      return;
    }

    // Obtener la universidad del usuario
    let universityId = null;
    if (user.profile && user.profile.universityId) {
      universityId = user.profile.universityId;
    }

    // Si tiene universidad, filtrar por ella usando query parameters; si no, mostrar todos
    if (universityId) {
      const targetUrl = `${baseUrl}/courses?university=${universityId}`;
      window.location.href = targetUrl;
    } else {
      const targetUrl = `${baseUrl}/courses`;
      window.location.href = targetUrl;
    }
  }

  // Funciones para cambiar el layout del dashboard
  function setStudentOnlyLayout() {
    const mainGrid = document.getElementById('dashboardMainGrid');
    const studentOnlyContainer = document.getElementById('studentOnlyContainer');
    const studentColumnOriginal = document.getElementById('studentColumnOriginal');
    const studentColumnHeader = document.getElementById('studentColumnHeader');

    if (mainGrid) {
      mainGrid.className = 'dashboard-main-grid student-only-layout';
    }

    if (studentOnlyContainer) {
      studentOnlyContainer.style.display = 'flex';
    }

    if (studentColumnOriginal) {
      studentColumnOriginal.style.display = 'none';
    }

    if (studentColumnHeader) {
      studentColumnHeader.style.display = 'none';
    }

    console.log('Layout cambiado a: Solo estudiante (2 columnas arriba)');
  }

  function setTutorLayout() {
    const mainGrid = document.getElementById('dashboardMainGrid');
    const studentOnlyContainer = document.getElementById('studentOnlyContainer');
    const studentColumnOriginal = document.getElementById('studentColumnOriginal');
    const studentColumnHeader = document.getElementById('studentColumnHeader');

    if (mainGrid) {
      mainGrid.className = 'dashboard-main-grid';
    }

    if (studentOnlyContainer) {
      studentOnlyContainer.style.display = 'none';
    }

    if (studentColumnOriginal) {
      studentColumnOriginal.style.display = 'flex';
    }

    if (studentColumnHeader) {
      studentColumnHeader.style.display = 'flex';
    }

    console.log('Layout cambiado a: Tutor (2 columnas lado a lado)');
  }

  // Función para mostrar mensajes temporales en el dashboard
  function showTemporaryMessage(type, notification) {
    // Crear un toast notification temporal
    const toast = document.createElement('div');
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'accepted' ? '#dcfce7' : type === 'rejected' ? '#fee2e2' : '#dbeafe'};
      color: ${type === 'accepted' ? '#166534' : type === 'rejected' ? '#991b1b' : '#2563eb'};
           padding: 1rem;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      max-width: 350px;
      border: 1px solid ${type === 'accepted' ? '#bbf7d0' : type === 'rejected' ? '#fecaca' : '#93c5fd'};
    `;

    toast.innerHTML = `
      <div style="font-weight: 600; margin-bottom: 0.25rem;">${notification.title}</div>
      <div style="font-size: 0.875rem;">${notification.message}</div>
    `;

    document.body.appendChild(toast);

    // Remover después de 4 segundos
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 4000);
  }

  // Hacer funciones globales
  window.logout = logout;
  window.manageCourses = manageCourses;
  window.openTutorPanel = openTutorPanel;
  window.joinTutoringSession = joinTutoringSession;
  window.goToMyCourses = goToMyCourses;

  // ===== SISTEMA DE TOASTS/NOTIFICACIONES VISUALES MEJORADO =====

  // Sistema de toasts simplificado
  window.showToast = function (message, type = 'info', duration = 3000) {
    // Remover toasts anteriores
    const existingToasts = document.querySelectorAll('.dashboard-toast');
    existingToasts.forEach(toast => toast.remove());

    // Crear el elemento toast
    const toast = document.createElement('div');
    toast.className = `dashboard-toast ${type}`;

    // Estilos simples pero efectivos
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 99999;
      max-width: 350px;
      padding: 12px 16px;
      border-radius: 8px;
      font-family: system-ui, -apple-system, sans-serif;
      font-size: 14px;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      transform: translateX(100%);
      transition: transform 0.3s ease;
      cursor: pointer;
      ${type === 'success' ? 'background: #d1fae5; color: #065f46; border-left: 4px solid #10b981;' : ''}
      ${type === 'error' ? 'background: #fee2e2; color: #991b1b; border-left: 4px solid #ef4444;' : ''}
      ${type === 'warning' ? 'background: #fef3c7; color: #92400e; border-left: 4px solid #f59e0b;' : ''}
      ${type === 'info' ? 'background: #dbeafe; color: #1e40af; border-left: 4px solid #3b82f6;' : ''}
    `;

    toast.textContent = message;
    document.body.appendChild(toast);

    // Animar entrada
    requestAnimationFrame(() => {
      toast.style.transform = 'translateX(0)';
    });

    // Remover automáticamente
    setTimeout(() => {
      if (toast.parentNode) {
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => toast.remove(), 300);
      }
    }, duration);

    // Remover al hacer click
    toast.addEventListener('click', () => {
      toast.style.transform = 'translateX(100%)';
      setTimeout(() => toast.remove(), 300);
    });
  };

  // Funciones específicas de toast para conveniencia
  window.showSuccessToast = message => showToast(message, 'success');
  window.showErrorToast = message => showToast(message, 'error');
  window.showWarningToast = message => showToast(message, 'warning');
  window.showInfoToast = message => showToast(message, 'info');

  // Función simple para forzar actualización del nombre (solo si es necesario)
  window.updateUserName = function () {
    const user = window.auth?.getCurrentUser();
    const userNameElement = document.getElementById('userName');
    if (userNameElement && user) {
      let displayName = '¡Hola, Usuario!';
      if (user.profile && user.profile.fullName) {
        displayName = `¡Hola, ${user.profile.fullName}!`;
      } else if (user.email) {
        const emailName = user.email.split('@')[0];
        displayName = `¡Hola, ${emailName}!`;
      }
      userNameElement.textContent = displayName;
      console.log('👤 Nombre actualizado:', displayName);
    }
  };
</script>

<style>
  .dashboard-section {
    min-height: calc(100vh - 64px);
    padding: var(--spacing-md) 0;
    background: linear-gradient(to bottom, #fafafa, #ffffff);
  }

  .container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    min-height: calc(100vh - 64px - 2rem);
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--spacing-md);
  }

  /* Header del Dashboard */
  .dashboard-header {
    padding: var(--spacing-md);
    background: white;
    border-radius: var(--radius-lg);
    border: 1px solid #f1f5f9;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);
    flex-shrink: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .user-welcome {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
  }

  .user-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 18px;
    position: relative;
  }

  /* Badge de tutor verificado */
  .tutor-verified-badge {
    position: absolute;
    bottom: -2px;
    right: -2px;
    width: 18px;
    height: 18px;
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    border: 2px solid white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 8px;
    color: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Badge de texto para tutor */
  .tutor-status-text {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    font-size: var(--font-size-xs);
    color: #10b981;
    font-weight: 600;
    margin-top: var(--spacing-xs);
  }

  /* Acciones del header */
  .header-actions {
    display: flex;
    gap: var(--spacing-sm);
  }

  .header-action-btn {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm) var(--spacing-md);
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: var(--font-size-sm);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(99, 102, 241, 0.2);
  }

  .header-action-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(99, 102, 241, 0.3);
  }

  .header-action-btn:active {
    transform: translateY(0);
  }

  /* Botón aplicar como tutor */
  .apply-tutor-btn {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm) var(--spacing-md);
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: var(--font-size-sm);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
  }

  .apply-tutor-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
    background: linear-gradient(135deg, #059669 0%, #047857 100%);
  }

  .apply-tutor-btn:active {
    transform: translateY(0);
  }

  .user-name {
    font-size: var(--font-size-lg);
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 var(--spacing-xs) 0;
  }

  .user-university {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    margin: 0;
  }

  /* Dashboard Grid */
  .dashboard-main-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-md);
    align-items: start;
  }

  /* Layout especial para solo estudiante */
  .dashboard-main-grid.student-only-layout {
    grid-template-columns: 1fr;
  }

  .dashboard-main-grid.student-only-layout .student-column {
    width: 100%;
  }

  .dashboard-main-grid.student-only-layout .column-header {
    display: none;
  }

  /* Container para layout solo estudiante */
  .student-only-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  .student-top-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-md);
  }

  /* Layout vertical para panel estudiante en modo tutor */
  .dashboard-main-grid:not(.student-only-layout) .student-column-original {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  .student-actions-full {
    width: 100%;
  }

  /* Ocultar layout original cuando está en modo solo estudiante */
  .dashboard-main-grid.student-only-layout .student-column-original {
    display: none !important;
  }

  /* Columnas */
  .student-column,
  .tutor-column {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  .column-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) var(--spacing-md);
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    color: white;
    border-radius: var(--radius-lg);
    box-shadow: 0 2px 4px rgba(99, 102, 241, 0.2);
  }

  .column-header h3 {
    margin: 0;
    font-size: var(--font-size-base);
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .tutor-column .column-header {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
  }

  /* Cards principales mejoradas */
  .dashboard-card {
    background: white !important;
    border-radius: 5px !important;
    padding: var(--spacing-md) !important;
    border: 1px solid #e2e8f0 !important;
    display: flex !important;
    flex-direction: column !important;
    box-shadow: none !important;
    transition: none !important;
    transform: none !important;
    position: static !important;
    overflow: visible !important;
  }

  .dashboard-card::before {
    display: none !important;
    content: none !important;
  }

  .dashboard-card:hover {
    box-shadow: none !important;
    transform: none !important;
    border-color: #e2e8f0 !important;
    background: white !important;
  }

  .dashboard-card h2 {
    font-size: var(--font-size-lg);
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 var(--spacing-md) 0;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .dashboard-card h2 i {
    color: #6366f1;
    font-size: var(--font-size-base);
    background: rgba(99, 102, 241, 0.1);
    padding: var(--spacing-xs);
    border-radius: var(--radius-md);
  }

  /* Cards específicas */
  .tutorials-card,
  .requests-card {
    min-height: 300px;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-sm);
  }

  .stat-item {
    text-align: center;
    padding: var(--spacing-md);
    background: #f8fafc;
    border-radius: var(--radius-md);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    min-height: 0;
  }

  .stat-icon {
    font-size: var(--font-size-lg);
    color: #6366f1;
    margin-bottom: var(--spacing-xs);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-lg);
    flex-shrink: 0;
    padding-bottom: var(--spacing-sm);
    border-bottom: 1px solid rgba(99, 102, 241, 0.1);
  }

  .settings-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    font-size: var(--font-size-lg);
    cursor: pointer;
    padding: var(--spacing-xs);
    border-radius: var(--radius-sm);
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .settings-btn:hover {
    background: var(--color-primary-light);
    color: var(--color-primary);
    transform: rotate(15deg);
  }

  .count-badge {
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    color: white;
    padding: var(--spacing-xs) var(--spacing-md);
    border-radius: var(--radius-full);
    font-size: var(--font-size-xs);
    font-weight: 600;
    box-shadow: 0 2px 4px rgba(99, 102, 241, 0.3);
    min-width: 24px;
    text-align: center;
  }

  /* Lista de tutorías mejorada */

  /* Lista de solicitudes pendientes mejorada */

  /* Recomendaciones */
  .recommendations-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    overflow-y: auto;
    flex: 1;
    min-height: 0;
  }

  .recommendation-item {
    padding: var(--spacing-sm);
    background: #f8fafc;
    border-radius: var(--radius-md);
    border: 1px solid #f1f5f9;
    flex-shrink: 0;
  }

  .rec-course {
    font-size: var(--font-size-sm);
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 var(--spacing-xs) 0;
  }

  .rec-tutor {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
    margin: 0 0 var(--spacing-xs) 0;
  }

  .rec-reason {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
    margin: 0;
    font-style: italic;
  }

  /* Acciones rápidas */
  .actions-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-xs);
  }

  .action-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm);
    background: #f8fafc;
    border: 1px solid #f1f5f9;
    border-radius: var(--radius-md);
    text-decoration: none;
    color: var(--text-primary);
    transition: all 0.2s ease;
    font-size: var(--font-size-xs);
    min-height: 80px;
  }

  .action-btn:hover {
    background: #eff6ff;
    border-color: #6366f1;
    color: #6366f1;
    transform: translateY(-1px);
  }

  .action-btn i {
    font-size: var(--font-size-sm);
  }

  /* Estadísticas */
  .stats-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--spacing-sm);
    flex: 1;
  }

  .stat-item {
    text-align: center;
    padding: var(--spacing-sm);
    background: #f8fafc;
    border-radius: var(--radius-md);
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 0;
  }

  .stat-number {
    display: block;
    font-size: var(--font-size-xl);
    font-weight: 700;
    color: #6366f1;
    margin-bottom: var(--spacing-xs);
  }

  .stat-label {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
  }

  /* Módulo Tutor */
  .tutor-course-info {
    padding: var(--spacing-md);
    background: #f8fafc;
    border-radius: var(--radius-md);
    border: 1px solid #e2e8f0;
  }

  .course-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .course-item i {
    color: #10b981;
    font-size: var(--font-size-base);
    width: 20px;
    text-align: center;
  }

  .course-details {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }

  .course-name {
    font-size: var(--font-size-sm);
    font-weight: 600;
    color: var(--text-primary);
  }

  .course-code {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
    font-family: 'Courier New', monospace;
  }

  .tutor-stats {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: var(--spacing-sm);
  }

  .tutor-stat {
    text-align: center;
    padding: var(--spacing-md);
    background: #f8fafc;
    border-radius: var(--radius-md);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xs);
  }

  .tutor-stat .stat-number {
    display: block;
    font-size: var(--font-size-lg);
    font-weight: 700;
    color: #10b981;
  }

  .tutor-stat .stat-label {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
  }

  .tutor-stat .stat-icon {
    font-size: var(--font-size-base);
    color: #10b981;
  }

  /* Disponibilidad */
  .availability-tags {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
  }

  .availability-tag {
    background: #dbeafe;
    color: #1e40af;
    padding: var(--spacing-sm);
    border-radius: var(--radius-md);
    font-size: var(--font-size-xs);
    font-weight: 500;
    border: 1px solid #93c5fd;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
  }

  .availability-tag i {
    color: #3b82f6;
  }

  /* Badges de tutor */
  .tutor-badge {
    font-size: var(--font-size-xs);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--radius-sm);
    font-weight: 500;
  }

  .tutor-badge.approved {
    background: #dcfce7;
    color: #166534;
  }

  .tutor-badge.pending {
    background: #fef3c7;
    color: #92400e;
  }

  .tutor-badge.rejected {
    background: #fee2e2;
    color: #991b1b;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .dashboard-main-grid {
      grid-template-columns: 1fr;
    }

    .student-column,
    .tutor-column {
      order: 1;
    }

    .tutor-column {
      order: 2;
    }

    /* Layout solo estudiante en tablet */
    .student-top-row {
      grid-template-columns: 1fr;
      gap: var(--spacing-sm);
    }
  }

  @media (max-width: 768px) {
    .dashboard-section {
      min-height: auto;
      padding: var(--spacing-sm) 0;
    }

    .container {
      min-height: auto;
      gap: var(--spacing-sm);
    }

    .dashboard-header {
      padding: var(--spacing-sm);
      flex-direction: column;
      gap: var(--spacing-sm);
    }

    .user-avatar {
      width: 40px;
      height: 40px;
      font-size: 16px;
    }

    .tutor-verified-badge {
      width: 16px;
      height: 16px;
      font-size: 7px;
    }

    .user-name {
      font-size: var(--font-size-base);
    }

    .dashboard-main-grid {
      grid-template-columns: 1fr;
      gap: var(--spacing-sm);
    }

    /* Layout solo estudiante en móvil */
    .student-top-row {
      grid-template-columns: 1fr;
      gap: var(--spacing-sm);
    }

    .actions-grid {
      grid-template-columns: 1fr 1fr;
    }

    .dashboard-card {
      padding: var(--spacing-sm) !important;
      border-radius: 5px !important;
      box-shadow: none !important;
      transform: none !important;
    }

    .column-header {
      padding: var(--spacing-xs) var(--spacing-sm);
    }

    .column-header h3 {
      font-size: var(--font-size-sm);
    }

    .tutor-stats {
      grid-template-columns: 1fr;
      gap: var(--spacing-xs);
    }

    .availability-tags {
      gap: var(--spacing-xs);
    }
  }

  /* Estilos para botones de acción del estudiante */
  .student-action-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Estilos específicos para solicitudes en el dashboard */
  .dashboard-section .request-item {
    background: white !important;
    border-radius: 5px !important;
    border: 1px solid #e2e8f0 !important;
    transition: all 0.3s ease !important;
  }

  .dashboard-section .request-item.pending {
    border-left: 4px solid #f59e0b !important;
    background: #fffbeb !important;
  }

  .dashboard-section .request-item.counter-offer {
    border-left: 4px solid #3b82f6 !important;
    background: #eff6ff !important;
  }

  .dashboard-section .request-item.accepted {
    border-left: 4px solid #10b981 !important;
    background: #f0fdf4 !important;
  }

  .dashboard-section .request-item.rejected {
    border-left: 4px solid #ef4444 !important;
    background: #fef2f2 !important;
  }

  /* Estilos para toasts */
  .dashboard-toast {
    position: fixed !important;
    top: 20px !important;
    right: 20px !important;
    background: #1f2937 !important;
    color: white !important;
    padding: 12px 16px !important;
    border-radius: 8px !important;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3) !important;
    z-index: 9999 !important;
    font-size: 14px !important;
    font-weight: 500 !important;
    min-width: 300px !important;
    max-width: 400px !important;
    opacity: 0 !important;
    transform: translateX(100%) !important;
    transition: all 0.3s ease !important;
    border: none !important;
    margin: 0 !important;
  }

  .dashboard-toast.show {
    opacity: 1 !important;
    transform: translateX(0) !important;
  }

  .dashboard-toast.success {
    background: #059669 !important;
    color: white !important;
  }

  .dashboard-toast.info {
    background: #2563eb !important;
    color: white !important;
  }

  .dashboard-toast.warning {
    background: #d97706 !important;
    color: white !important;
  }

  .dashboard-toast.error {
    background: #dc2626 !important;
    color: white !important;
  }

  /* Estilos específicos para las solicitudes y notificaciones en el dashboard */
  .dashboard-section .request-item {
    background: white !important;
    border: 1px solid #e2e8f0 !important;
    border-radius: 8px !important;
    padding: 1rem !important;
    margin-bottom: 0.75rem !important;
    transition: all 0.2s ease !important;
    position: relative !important;
  }

  .dashboard-section .request-item:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    transform: translateY(-1px) !important;
  }

  .dashboard-section .request-item.counter-offer {
    border-left: 4px solid #f59e0b !important;
    background: #fffbeb !important;
  }

  .dashboard-section .request-item.pending {
    border-left: 4px solid #6366f1 !important;
  }

  .dashboard-section .request-item.accepted {
    border-left: 4px solid #10b981 !important;
    background: #f0fdf4 !important;
  }

  .dashboard-section .request-item.rejected {
    border-left: 4px solid #ef4444 !important;
    background: #fef2f2 !important;
  }

  /* Reforzar estilos para botones de acción (evitar grises por herencia global) */
  .dashboard-section .student-action-btn.btn-accept,
  .dashboard-section .student-action-btn.btn-counter,
  .dashboard-section .student-action-btn.btn-reject,
  .dashboard-section .tutor-action-btn.btn-accept,
  .dashboard-section .tutor-action-btn.btn-counter,
  .dashboard-section .tutor-action-btn.btn-reject {
    filter: none !important;
    appearance: none !important;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04) !important;
    outline: 2px solid transparent !important;
    outline-offset: 0 !important;
    opacity: 1 !important;
    background-blend-mode: normal !important;
  }

  .dashboard-section .student-action-btn.btn-accept:active,
  .dashboard-section .student-action-btn.btn-counter:active,
  .dashboard-section .student-action-btn.btn-reject:active,
  .dashboard-section .tutor-action-btn.btn-accept:active,
  .dashboard-section .tutor-action-btn.btn-counter:active,
  .dashboard-section .tutor-action-btn.btn-reject:active {
    filter: none !important;
    opacity: 0.92 !important;
  }
</style>
