---
import Navigation from '../components/Navigation.astro';
import { courses } from '../data/courses.js';
import { getTutorsByCourseFast, getUniversityByIdFast } from '../data/optimized.js';
import Layout from '../layouts/Layout.astro';

// Obtener par√°metros de consulta para filtro por universidad
const url = new URL(Astro.request.url);
let universityId = url.searchParams.get('university');

// WORKAROUND: Si no hay query param en server, intentar obtenerlo del cliente
if (!universityId) {
  // Intentar extraer de la URL completa como fallback
  const fullUrl = url.toString();
  const match = fullUrl.match(/[?&]university=(\d+)/);
  if (match && match[1]) {
    universityId = match[1];
  }
}

// DEBUG: Logs para verificar el filtrado
console.log('üîç DEBUG FILTRADO DETALLADO:');
console.log('URL original:', Astro.request.url);
console.log('URL parseada:', url.toString());
console.log('URL.href:', url.href);
console.log('URL.search:', url.search);
console.log('Query params completos:', Object.fromEntries(url.searchParams));
console.log('universityId directo:', url.searchParams.get('university'));
console.log('universityId obtenido:', universityId);
console.log('Total cursos disponibles:', courses.length);

// Filtrar cursos por universidad si se especifica
let filteredCourses = courses;
let selectedUniversity = null;

if (universityId && universityId !== 'null' && universityId.trim() !== '') {
  const univId = parseInt(universityId, 10);
  console.log('universityId parseado:', univId);

  if (!isNaN(univId)) {
    filteredCourses = courses.filter(course => course.universityId === univId);
    selectedUniversity = getUniversityByIdFast(univId);
    console.log('‚úÖ Filtrado aplicado - Universidad:', selectedUniversity?.name);
    console.log('‚úÖ Cursos filtrados:', filteredCourses.length);
    console.log(
      '‚úÖ IDs de cursos filtrados:',
      filteredCourses.map(c => `${c.id}:${c.name}`)
    );
  }
} else {
  console.log('‚ùå No se aplic√≥ filtrado - universityId inv√°lido');
}

console.log('Cursos finales a mostrar:', filteredCourses.length);

// Funci√≥n para obtener el logo de la universidad por ID
function getUniversityLogo(universityId: number) {
  const university = getUniversityByIdFast(universityId);
  return university
    ? import.meta.env.BASE_URL + university.logo
    : import.meta.env.BASE_URL + '/universidades/default.png';
}

// Funci√≥n para obtener el nombre de la universidad por ID
function getUniversityName(universityId: number) {
  const university = getUniversityByIdFast(universityId);
  return university ? university.name : 'Universidad';
}

// Funci√≥n para convertir n√∫meros a n√∫meros romanos
function toRoman(num: number): string {
  const values = [10, 9, 5, 4, 1];
  const symbols = ['X', 'IX', 'V', 'IV', 'I'];

  let result = '';
  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    const symbol = symbols[i];
    if (value && symbol) {
      while (num >= value) {
        result += symbol;
        num -= value;
      }
    }
  }
  return result;
}

// Enriquecer cursos con datos de universidades y tutores
const enrichedCourses = filteredCourses.map(course => ({
  ...course,
  universityName: getUniversityName(course.universityId),
  universityLogo: getUniversityLogo(course.universityId),
  tutorsCount: getTutorsByCourseFast(course.id).length,
}));

// Pasar datos al cliente para filtrado h√≠brido
const allEnrichedCourses = courses.map(course => ({
  ...course,
  universityName: getUniversityName(course.universityId),
  universityLogo: getUniversityLogo(course.universityId),
  tutorsCount: getTutorsByCourseFast(course.id).length,
}));
---

<Layout title='Cursos - Hermes Academy'>
  <Navigation currentSection='cursos' />
  <main class='courses-main'>
    <section class='courses-section'>
      <div class='container'>
        <!-- Header de la secci√≥n -->
        <div class='section-header'>
          <div class='header-title'>
            {
              selectedUniversity ? (
                <>
                  <h1 class='section-title'>Cursos de {selectedUniversity.name}</h1>
                  <p class='section-description'>
                    Explora todos los cursos disponibles en {selectedUniversity.shortName} y conecta con sus tutores
                    especializados
                  </p>
                  <div class='university-filter'>
                    <div class='filter-info'>
                      <img src={selectedUniversity.logo} alt={selectedUniversity.name} class='filter-logo' />
                      <span class='filter-text'>{enrichedCourses.length} cursos disponibles</span>
                    </div>
                    <a href={import.meta.env.BASE_URL + '/courses'} class='remove-filter'>
                      <i class='fas fa-times' />
                      Ver todos los cursos
                    </a>
                  </div>
                </>
              ) : (
                <>
                  <h1 class='section-title'>Explora los cursos disponibles</h1>
                  <p class='section-description'>
                    Encuentra el curso perfecto para tu carrera universitaria y conecta con los mejores tutores
                  </p>
                </>
              )
            }
          </div>
          <div class='header-search'>
            <div class='search-box'>
              <i class='fas fa-search search-icon'></i>
              <input type='text' placeholder='Buscar curso...' class='search-input' />
            </div>
          </div>
        </div>

        <!-- Grid de cursos -->
        <div class='courses-grid'>
          {
            enrichedCourses.map(course => (
              <div class='course-card'>
                <div class='course-header'>
                  <h3 class='course-name'>
                    <i class='fa-solid fa-book' />
                    {course.name}
                  </h3>
                  <div class='course-cycle'>
                    <span class='cycle-number'>{toRoman(course.cycle)}</span>
                  </div>
                </div>

                <div class='course-info'>
                  <p class='course-code'>C√≥digo: {course.code}</p>
                  <div class='course-university'>
                    <div class='university-logo-small'>
                      <img src={course.universityLogo} alt={course.universityName} />
                    </div>
                    <span class='university-name'>{course.universityName}</span>
                  </div>
                  <p class='course-description'>{course.description}</p>

                  <div class='course-details'>
                    <div class='detail-item'>
                      <i class='fas fa-university detail-icon' />
                      <span>√Årea: {course.area}</span>
                    </div>
                    <div class='detail-item'>
                      <i class='fas fa-star detail-icon' />
                      <span>{course.tutorsCount} tutores disponibles</span>
                    </div>
                  </div>
                </div>

                <div class='course-actions'>
                  <a href={import.meta.env.BASE_URL + `/course/${course.id}`} class='btn btn-primary btn-block'>
                    Ver detalles
                  </a>
                </div>
              </div>
            ))
          }
        </div>

        <!-- Paginaci√≥n -->
        <div class='pagination'>
          <button class='pagination-btn pagination-prev' disabled>
            <i class='fas fa-arrow-left'></i>
            Anterior
          </button>

          <div class='pagination-numbers'>
            <button class='pagination-number active'>1</button>
            <button class='pagination-number'>2</button>
            <button class='pagination-number'>3</button>
            <span class='pagination-dots'>...</span>
            <button class='pagination-number'>8</button>
          </div>

          <button class='pagination-btn pagination-next'>
            Siguiente
            <i class='fas fa-arrow-right'></i>
          </button>
        </div>
      </div>
    </section>
  </main>
</Layout>

<style>
  .courses-main {
    min-height: calc(100vh - 70px);
    padding-top: 70px;
  }

  .courses-section {
    padding: var(--spacing-3xl) 0;
  }

  .section-header {
    margin-bottom: var(--spacing-3xl);
  }

  .header-title {
    text-align: center;
    margin-bottom: var(--spacing-lg);
  }

  :global(.section-title) {
    font-size: var(--font-size-4xl);
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: var(--spacing-md);
  }

  :global(.section-description) {
    font-size: var(--font-size-lg);
    color: var(--text-secondary);
    line-height: 1.6;
    max-width: 600px;
    margin: 0 auto;
  }

  :global(.section-title-filtered) {
    font-size: var(--font-size-2xl);
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: var(--spacing-lg);
    text-align: center;
    line-height: 1.4;
    max-width: 700px;
    margin: 0 auto var(--spacing-lg) auto;
  }

  :global(.university-filter) {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-lg);
    margin-top: var(--spacing-lg);
    padding: var(--spacing-md);
    background: var(--surface-secondary);
    border-radius: 12px;
    border: 1px solid var(--border-light);
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
    margin-top: var(--spacing-lg);
  }

  :global(.filter-info) {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  :global(.filter-logo) {
    width: 32px;
    height: 32px;
    border-radius: 6px;
    object-fit: cover;
  }

  :global(.filter-text) {
    font-size: var(--font-size-sm);
    font-weight: 500;
    color: var(--text-primary);
  }

  :global(.remove-filter) {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-xs) var(--spacing-sm);
    background: var(--surface-tertiary);
    color: var(--text-secondary);
    text-decoration: none;
    border-radius: 6px;
    font-size: var(--font-size-sm);
    transition: all 0.2s ease;
  }

  :global(.remove-filter:hover) {
    background: var(--surface-primary);
    color: var(--text-primary);
  }

  .header-search {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: var(--spacing-md);
  }

  :global(.view-all-btn) {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm) var(--spacing-lg);
    background: var(--color-primary);
    color: white;
    text-decoration: none;
    border-radius: var(--radius-lg);
    font-size: var(--font-size-sm);
    font-weight: 600;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  :global(.view-all-btn:hover) {
    background: var(--color-primary-dark);
    transform: translateY(-1px);
  }

  :global(.view-all-btn i) {
    font-size: var(--font-size-xs);
  }

  .search-box {
    position: relative;
    width: 320px;
  }

  .search-icon {
    position: absolute;
    left: var(--spacing-md);
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-light);
    font-size: 14px;
  }

  .search-input {
    width: 100%;
    padding: 12px 16px 12px 40px;
    border: 1px solid var(--border-medium);
    border-radius: var(--radius-lg);
    font-size: var(--font-size-sm);
    background: white;
    transition: all 0.2s ease;
    outline: none;
  }

  .search-input:focus {
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .search-input::placeholder {
    color: var(--text-light);
  }

  /* Responsive para header */
  @media (max-width: 768px) {
    .section-title {
      font-size: var(--font-size-3xl);
    }

    .header-search {
      justify-content: center;
    }

    .search-box {
      width: 100%;
      max-width: 400px;
    }
  }

  /* Grid de cursos */
  :global(.courses-grid) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: var(--spacing-xl);
    margin-bottom: var(--spacing-3xl);
  }

  :global(.course-card) {
    background: var(--bg-principal);
    border-radius: var(--radius-xl);
    padding: var(--spacing-lg);
    border: 1px solid var(--border-light);
    transition:
      transform 0.2s ease,
      border-color 0.2s ease;
  }

  :global(.course-card:hover) {
    transform: translateY(-2px);
    border-color: var(--color-primary);
  }

  :global(.course-header) {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--spacing-md);
  }

  :global(.course-name) {
    font-size: var(--font-size-lg);
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
    line-height: 1.3;
    flex: 1;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
  }

  :global(.course-name i) {
    color: var(--color-primary);
    font-size: var(--font-size-md);
  }

  :global(.cycle-number) {
    font-size: var(--font-size-sm);
    font-weight: 700;
    color: var(--color-primary);
    padding: var(--spacing-xs) var(--spacing-sm);
    background: var(--color-primary-light);
    border-radius: var(--radius-md);
    flex-shrink: 0;
  }

  :global(.course-cycle) {
    flex-shrink: 0;
  }

  :global(.course-info) {
    margin-bottom: var(--spacing-md);
  }

  :global(.course-university) {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-sm);
  }

  :global(.university-logo-small) {
    flex-shrink: 0;
    width: 24px;
    height: 24px;
    border-radius: var(--radius-sm);
    overflow: hidden;
    border: 1px solid var(--border-light);
  }

  :global(.university-logo-small img) {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background: white;
  }

  :global(.university-name) {
    font-size: var(--font-size-xs);
    color: var(--text-secondary);
    font-weight: 500;
  }

  :global(.course-code) {
    font-size: var(--font-size-sm);
    color: var(--text-primary);
    margin-bottom: var(--spacing-sm);
    font-weight: 600;
  }

  :global(.course-description) {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    margin-bottom: var(--spacing-md);
    line-height: 1.5;
  }

  :global(.course-details) {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  :global(.detail-item) {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    color: var(--text-secondary);
    font-size: var(--font-size-sm);
  }

  :global(.detail-icon) {
    color: var(--color-primary);
    flex-shrink: 0;
  }

  :global(.course-actions) {
    margin-bottom: var(--spacing-md);
  }

  :global(.btn-block) {
    width: 100%;
  }

  :global(.course-stats) {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-sm);
    padding-top: var(--spacing-md);
    border-top: 1px solid var(--border-light);
  }

  :global(.stat) {
    text-align: center;
  }

  :global(.stat-number) {
    display: block;
    font-size: var(--font-size-lg);
    font-weight: 600;
    color: var(--color-primary);
    margin-bottom: var(--spacing-xs);
  }

  :global(.stat-label) {
    font-size: var(--font-size-xs);
    color: var(--text-light);
  }

  /* Estilos para mensaje sin cursos */
  :global(.no-courses-message) {
    text-align: center;
    padding: 3rem;
    color: var(--text-secondary);
    grid-column: 1 / -1;
  }

  :global(.no-courses-message i) {
    font-size: 3rem;
    color: #cbd5e1;
    margin-bottom: 1rem;
    display: block;
  }

  :global(.no-courses-message h3) {
    margin: 1rem 0 0.5rem 0;
    color: var(--text-primary);
  }

  :global(.no-courses-message p) {
    margin-bottom: 1.5rem;
  }

  /* Paginaci√≥n */
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-md);
  }

  .pagination-btn {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm) var(--spacing-lg);
    border: 1px solid var(--border-medium);
    background: var(--bg-principal);
    border-radius: var(--radius-md);
    color: var(--text-secondary);
    font-size: var(--font-size-sm);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .pagination-btn:hover:not(:disabled) {
    background: var(--color-primary-light);
    border-color: var(--color-primary);
    color: var(--color-primary);
  }

  .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .pagination-numbers {
    display: flex;
    gap: var(--spacing-xs);
    align-items: center;
  }

  .pagination-number {
    width: 40px;
    height: 40px;
    border: 1px solid var(--border-medium);
    background: var(--bg-principal);
    border-radius: var(--radius-md);
    color: var(--text-secondary);
    font-size: var(--font-size-sm);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .pagination-number:hover {
    background: var(--color-primary-light);
    border-color: var(--color-primary);
    color: var(--color-primary);
  }

  .pagination-number.active {
    background: var(--color-primary);
    border-color: var(--color-primary);
    color: var(--text-white);
  }

  .pagination-dots {
    padding: 0 var(--spacing-sm);
    color: var(--text-light);
  }

  @media (max-width: 768px) {
    .courses-grid {
      grid-template-columns: 1fr;
    }

    .pagination {
      flex-direction: column;
      gap: var(--spacing-lg);
    }

    .pagination-numbers {
      order: -1;
    }
  }
</style>

<script
  define:vars={{
    allEnrichedCourses: allEnrichedCourses,
    serverFilteredCourses: enrichedCourses,
    filteredCoursesCount: filteredCourses.length,
    totalCoursesCount: courses.length,
    universityIdParam: universityId,
    selectedUniversityName: selectedUniversity?.name || null,
  }}
>
  // DEBUG: Logs para la consola del navegador
  console.log('üîç DEBUG FILTRADO CURSOS:');
  console.log('URL actual:', window.location.href);
  console.log('Par√°metro university recibido en servidor:', universityIdParam);
  console.log('Universidad seleccionada:', selectedUniversityName);
  console.log('Total cursos en sistema:', totalCoursesCount);
  console.log('Cursos mostrados despu√©s del filtro servidor:', filteredCoursesCount);

  // Verificar si necesitamos filtrado del lado del cliente
  const urlParams = new URLSearchParams(window.location.search);
  const clientUniversityId = urlParams.get('university');

  console.log('Par√°metro university desde cliente:', clientUniversityId);

  // Aplicar filtrado del lado del cliente si es necesario
  if (clientUniversityId && !universityIdParam) {
    console.log('üîÑ Aplicando filtro del lado del cliente...');

    const universityIdInt = parseInt(clientUniversityId, 10);
    if (!isNaN(universityIdInt)) {
      const clientFilteredCourses = allEnrichedCourses.filter(course => course.universityId === universityIdInt);
      console.log('‚úÖ Filtro cliente aplicado. Cursos encontrados:', clientFilteredCourses.length);

      // Re-renderizar cuando la p√°gina est√© lista con un peque√±o retraso
      document.addEventListener('DOMContentLoaded', () => {
        // Peque√±o retraso para asegurar que los estilos est√©n cargados
        setTimeout(() => {
          renderClientFilteredCourses(clientFilteredCourses, universityIdInt);
        }, 100);
      });
    }
  } else if (universityIdParam) {
    console.log('‚úÖ Filtro aplicado en servidor para universidad ID:', universityIdParam);
  } else {
    console.log('‚ùå Sin filtro - mostrando todos los cursos');
  }

  console.log('================================');

  // Funci√≥n para re-renderizar cursos filtrados del lado del cliente
  function renderClientFilteredCourses(courses, universityId) {
    console.log('üéØ Re-renderizando cursos filtrados del cliente:', courses.length);

    const coursesGrid = document.querySelector('.courses-grid');
    const sectionHeader = document.querySelector('.section-header .header-title');

    if (!coursesGrid) return;

    // Actualizar header con informaci√≥n de universidad
    const university = getUniversityData(universityId);
    if (university && sectionHeader) {
      sectionHeader.innerHTML = `
        <h1 class="section-title-filtered">
          Explora todos los cursos disponibles en ${university.shortName} y conecta con sus tutores especializados
        </h1>
      `;
    }

    // Agregar bot√≥n "Ver todo" al √°rea de b√∫squeda
    const headerSearch = document.querySelector('.header-search');
    if (headerSearch && university) {
      // Verificar si ya existe el bot√≥n para no duplicarlo
      if (!headerSearch.querySelector('.view-all-btn')) {
        const viewAllBtn = document.createElement('a');
        viewAllBtn.href = '/hermes-academy/courses';
        viewAllBtn.className = 'view-all-btn';
        viewAllBtn.innerHTML = '<i class="fas fa-grid-2"></i> Ver todo';
        headerSearch.appendChild(viewAllBtn);
      }
    }

    // Limpiar y re-renderizar grid
    coursesGrid.innerHTML = '';

    if (courses.length === 0) {
      coursesGrid.innerHTML = `
        <div class="no-courses-message">
          <i class="fas fa-search"></i>
          <h3>No se encontraron cursos</h3>
          <p>No hay cursos disponibles para esta universidad.</p>
          <a href="/hermes-academy/courses" class="btn btn-primary">Ver todos los cursos</a>
        </div>
      `;
    } else {
      courses.forEach(course => {
        const courseCard = createCourseCard(course);
        coursesGrid.appendChild(courseCard);
      });
    }

    // Re-aplicar FontAwesome si es necesario
    if (window.FontAwesome && window.FontAwesome.dom) {
      window.FontAwesome.dom.i2svg();
    }
  }

  // Funci√≥n para crear tarjeta de curso (replica exacta del servidor)
  function createCourseCard(course) {
    const card = document.createElement('div');
    card.className = 'course-card';

    const cycleRoman = toRoman(course.cycle || 1);

    // Usar la misma estructura exacta que el servidor
    card.innerHTML = `
      <div class="course-header">
        <h3 class="course-name">
          <i class="fa-solid fa-book"></i>
          ${course.name}
        </h3>
        <div class="course-cycle">
          <span class="cycle-number">${cycleRoman}</span>
        </div>
      </div>

      <div class="course-info">
        <p class="course-code">C√≥digo: ${course.code}</p>
        <div class="course-university">
          <div class="university-logo-small">
            <img src="${course.universityLogo}" alt="${course.universityName}" />
          </div>
          <span class="university-name">${course.universityName}</span>
        </div>
        <p class="course-description">${course.description || 'Descripci√≥n del curso'}</p>

        <div class="course-details">
          <div class="detail-item">
            <i class="fas fa-university detail-icon"></i>
            <span>√Årea: ${course.area || 'Ingenier√≠a'}</span>
          </div>
          <div class="detail-item">
            <i class="fas fa-star detail-icon"></i>
            <span>${course.tutorsCount || 0} tutores disponibles</span>
          </div>
        </div>
      </div>

      <div class="course-actions">
        <a href="/hermes-academy/course/${course.id}" class="btn btn-primary btn-block">
          Ver detalles
        </a>
      </div>
    `;

    return card;
  }

  // Funci√≥n para obtener datos de universidad
  function getUniversityData(universityId) {
    const universities = {
      1: {
        name: 'Universidad de Ingenier√≠a y Tecnolog√≠a',
        shortName: 'UTEC',
        logo: '/hermes-academy/universidades/utec.jpg',
      },
      3: {
        name: 'Pontificia Universidad Cat√≥lica del Per√∫',
        shortName: 'PUCP',
        logo: '/hermes-academy/universidades/pucp.png',
      },
      4: {
        name: 'Universidad Nacional de Ingenier√≠a',
        shortName: 'UNI',
        logo: '/hermes-academy/universidades/uni.png',
      },
      5: {
        name: 'Universidad de Lima',
        shortName: 'UL',
        logo: '/hermes-academy/universidades/u_de_lima.png',
      },
      7: {
        name: 'Universidad C√©sar Vallejo',
        shortName: 'UCV',
        logo: '/hermes-academy/universidades/ucv.png',
      },
      8: {
        name: 'Universidad de Piura',
        shortName: 'UDEP',
        logo: '/hermes-academy/universidades/universidad_de_piura.jpg',
      },
      10: {
        name: 'Universidad Peruana de Ciencias Aplicadas',
        shortName: 'UPC',
        logo: '/hermes-academy/universidades/UPC_logo_transparente.png',
      },
      11: {
        name: 'Universidad Nacional Toribio Rodr√≠guez de Mendoza',
        shortName: 'UNTRM',
        logo: '/hermes-academy/universidades/default.png',
      },
    };
    return universities[universityId];
  }

  // Funci√≥n para convertir n√∫meros a romanos (lado cliente)
  function toRoman(num) {
    const values = [10, 9, 5, 4, 1];
    const symbols = ['X', 'IX', 'V', 'IV', 'I'];
    let result = '';
    for (let i = 0; i < values.length; i++) {
      while (num >= values[i]) {
        result += symbols[i];
        num -= values[i];
      }
    }
    return result;
  }
</script>
