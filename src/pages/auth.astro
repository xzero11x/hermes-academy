---
import Layout from '../layouts/Layout.astro';
---

<Layout title='Iniciar Sesión - Hermes Academy'>
  <main class='auth-main'>
    <div class='auth-container'>
      <div class='auth-card'>
        <!-- Header -->
        <div class='auth-header'>
          <h1 class='welcome-text'>Welcome to</h1>
          <h2 class='brand-text'>Hermes Academy</h2>
        </div>

        <!-- Social Login Buttons -->
        <div class='social-buttons'>
          <button type='button' class='social-btn google-btn' onclick='loginWithGoogle()'>
            <svg width='20' height='20' viewBox='0 0 20 20' fill='none'>
              <path
                d='M19.9895 10.1871C19.9895 9.36767 19.9214 8.76973 19.7742 8.14966H10.1992V11.848H15.8195C15.7062 12.7671 15.0943 14.1512 13.7346 15.0813L13.7155 15.2051L16.7429 17.4969L16.9527 17.5174C18.879 15.7789 19.9895 13.221 19.9895 10.1871Z'
                fill='#4285F4'
              >
              </path>
              <path
                d='M10.1993 19.9313C12.9527 19.9313 15.2643 19.0454 16.9527 17.5174L13.7346 15.0813C12.8734 15.6682 11.7176 16.0779 10.1993 16.0779C7.50243 16.0779 5.21946 14.3395 4.40014 11.9366L4.27989 11.9465L1.13592 14.3273L1.08887 14.4391C2.76443 17.6945 6.21831 19.9313 10.1993 19.9313Z'
                fill='#34A853'
              >
              </path>
              <path
                d='M4.39899 11.9366C4.1758 11.3165 4.04811 10.6521 4.04811 9.96562C4.04811 9.27905 4.1758 8.61478 4.38668 7.99466L4.38183 7.8626L1.19534 5.44366L1.08766 5.49214C0.397214 6.84305 0.000976562 8.36304 0.000976562 9.96562C0.000976562 11.5682 0.397214 13.0881 1.08766 14.4391L4.39899 11.9366Z'
                fill='#FBBC05'
              >
              </path>
              <path
                d='M10.1993 3.85336C11.8883 3.85336 13.0894 4.66168 13.7589 5.33718L16.6175 2.59107C15.2555 1.38419 12.9527 0.0687256 10.1993 0.0687256C6.21831 0.0687256 2.76443 2.30545 1.08887 5.49214L4.38668 7.99466C5.21946 5.59183 7.50243 3.85336 10.1993 3.85336Z'
                fill='#EB4335'
              >
              </path>
            </svg>
            Login with Google
          </button>

          <button type='button' class='social-btn github-btn' onclick='loginWithGithub()'>
            <svg width='20' height='20' viewBox='0 0 20 20' fill='none'>
              <path
                d='M10 0C4.475 0 0 4.475 0 10C0 14.425 2.8625 18.1625 6.8375 19.4875C7.3375 19.575 7.525 19.275 7.525 19.0125C7.525 18.775 7.5125 17.9875 7.5125 17.15C5 17.6125 4.35 16.5375 4.15 15.975C4.0375 15.6875 3.55 14.8 3.125 14.5625C2.775 14.375 2.275 13.9125 3.1125 13.9C3.9 13.8875 4.4625 14.625 4.65 14.925C5.55 16.4375 6.9875 16.0125 7.5625 15.75C7.65 15.1 7.9125 14.6625 8.2 14.4125C5.975 14.1625 3.65 13.3 3.65 9.475C3.65 8.3875 4.0375 7.4875 4.675 6.7875C4.575 6.5375 4.225 5.5125 4.775 4.1375C4.775 4.1375 5.6125 3.875 7.525 5.1625C8.325 4.9375 9.175 4.825 10.025 4.825C10.875 4.825 11.725 4.9375 12.525 5.1625C14.4375 3.8625 15.275 4.1375 15.275 4.1375C15.825 5.5125 15.475 6.5375 15.375 6.7875C16.0125 7.4875 16.4 8.375 16.4 9.475C16.4 13.3125 14.0625 14.1625 11.8375 14.4125C12.2 14.725 12.5125 15.325 12.5125 16.2625C12.5125 17.6 12.5 18.675 12.5 19.0125C12.5 19.275 12.6875 19.5875 13.1875 19.4875C17.1375 18.1625 20 14.4125 20 10C20 4.475 15.525 0 10 0Z'
                fill='currentColor'
              >
              </path>
            </svg>
            Login with Github
          </button>
        </div>

        <!-- Divider -->
        <div class='divider'>
          <span>OR</span>
        </div>

        <!-- Login Form -->
        <form class='login-form' onsubmit='handleLogin(event)'>
          <div class='input-group'>
            <div class='input-wrapper'>
              <svg class='input-icon' width='20' height='20' viewBox='0 0 20 20' fill='none'>
                <path
                  d='M3.33333 3.33333H16.6667C17.5833 3.33333 18.3333 4.08333 18.3333 5V15C18.3333 15.9167 17.5833 16.6667 16.6667 16.6667H3.33333C2.41667 16.6667 1.66667 15.9167 1.66667 15V5C1.66667 4.08333 2.41667 3.33333 3.33333 3.33333ZM16.6667 5L10 10.8333L3.33333 5H16.6667Z'
                  fill='currentColor'
                >
                </path>
              </svg>
              <input type='email' placeholder='example@gmail.com' class='form-input' id='email' required />
            </div>
          </div>

          <div class='input-group'>
            <div class='input-wrapper'>
              <svg class='input-icon' width='20' height='20' viewBox='0 0 20 20' fill='none'>
                <path
                  d='M15.8333 9.16667H15V6.66667C15 3.905 12.7617 1.66667 10 1.66667C7.23833 1.66667 5 3.905 5 6.66667V9.16667H4.16667C3.24167 9.16667 2.5 9.90833 2.5 10.8333V16.6667C2.5 17.5917 3.24167 18.3333 4.16667 18.3333H15.8333C16.7583 18.3333 17.5 17.5917 17.5 16.6667V10.8333C17.5 9.90833 16.7583 9.16667 15.8333 9.16667ZM6.66667 6.66667C6.66667 4.825 8.15833 3.33333 10 3.33333C11.8417 3.33333 13.3333 4.825 13.3333 6.66667V9.16667H6.66667V6.66667Z'
                  fill='currentColor'
                >
                </path>
              </svg>
              <input type='password' placeholder='••••••••••' class='form-input' id='password' required />
              <button type='button' class='toggle-password' onclick='togglePassword()'>
                <svg width='20' height='20' viewBox='0 0 20 20' fill='none'>
                  <path
                    d='M10 12.5C11.3807 12.5 12.5 11.3807 12.5 10C12.5 8.61929 11.3807 7.5 10 7.5C8.61929 7.5 7.5 8.61929 7.5 10C7.5 11.3807 8.61929 12.5 10 12.5Z'
                    fill='currentColor'
                  >
                  </path>
                  <path
                    d='M10 4.16667C5.83333 4.16667 2.275 6.69167 0.833333 10.4167C2.275 14.1417 5.83333 16.6667 10 16.6667C14.1667 16.6667 17.725 14.1417 19.1667 10.4167C17.725 6.69167 14.1667 4.16667 10 4.16667ZM10 14.1667C7.70833 14.1667 5.83333 12.2917 5.83333 10C5.83333 7.70833 7.70833 5.83333 10 5.83333C12.2917 5.83333 14.1667 7.70833 14.1667 10C14.1667 12.2917 12.2917 14.1667 10 14.1667Z'
                    fill='currentColor'
                  >
                  </path>
                </svg>
              </button>
            </div>
          </div>

          <div class='form-options'>
            <label class='checkbox-label'>
              <input type='checkbox' id='remember' />
              <span class='checkmark'></span>
              Remember me
            </label>
            <a href='#' class='forgot-link'>Forgot Password?</a>
          </div>

          <button type='submit' class='login-btn'>Login</button>
        </form>

        <!-- Register Link -->
        <div class='register-link'>
          <span id='authToggleText'>Don't have an account?</span>
          <a href='#' onclick='toggleAuthMode()' id='authToggleLink'>Register</a>
        </div>

        <!-- Register Form (hidden initially) -->
        <form class='register-form' id='registerForm' style='display: none;' onsubmit='handleRegister(event)'>
          <div class='input-group'>
            <div class='input-wrapper'>
              <svg class='input-icon' width='20' height='20' viewBox='0 0 20 20' fill='none'>
                <path
                  d='M3.33333 3.33333H16.6667C17.5833 3.33333 18.3333 4.08333 18.3333 5V15C18.3333 15.9167 17.5833 16.6667 16.6667 16.6667H3.33333C2.41667 16.6667 1.66667 15.9167 1.66667 15V5C1.66667 4.08333 2.41667 3.33333 3.33333 3.33333ZM16.6667 5L10 10.8333L3.33333 5H16.6667Z'
                  fill='currentColor'
                >
                </path>
              </svg>
              <input
                type='email'
                placeholder='tu-email@universidad.edu.pe'
                class='form-input'
                id='registerEmail'
                required
              />
            </div>
          </div>

          <div class='input-group'>
            <div class='input-wrapper'>
              <svg class='input-icon' width='20' height='20' viewBox='0 0 20 20' fill='none'>
                <path
                  d='M15.8333 9.16667H15V6.66667C15 3.905 12.7617 1.66667 10 1.66667C7.23833 1.66667 5 3.905 5 6.66667V9.16667H4.16667C3.24167 9.16667 2.5 9.90833 2.5 10.8333V16.6667C2.5 17.5917 3.24167 18.3333 4.16667 18.3333H15.8333C16.7583 18.3333 17.5 17.5917 17.5 16.6667V10.8333C17.5 9.90833 16.7583 9.16667 15.8333 9.16667ZM6.66667 6.66667C6.66667 4.825 8.15833 3.33333 10 3.33333C11.8417 3.33333 13.3333 4.825 13.3333 6.66667V9.16667H6.66667V6.66667Z'
                  fill='currentColor'
                >
                </path>
              </svg>
              <input
                type='password'
                placeholder='••••••••••'
                class='form-input'
                id='registerPassword'
                required
                minlength='6'
              />
            </div>
          </div>

          <div class='input-group'>
            <div class='input-wrapper'>
              <svg class='input-icon' width='20' height='20' viewBox='0 0 20 20' fill='none'>
                <path
                  d='M15.8333 9.16667H15V6.66667C15 3.905 12.7617 1.66667 10 1.66667C7.23833 1.66667 5 3.905 5 6.66667V9.16667H4.16667C3.24167 9.16667 2.5 9.90833 2.5 10.8333V16.6667C2.5 17.5917 3.24167 18.3333 4.16667 18.3333H15.8333C16.7583 18.3333 17.5 17.5917 17.5 16.6667V10.8333C17.5 9.90833 16.7583 9.16667 15.8333 9.16667ZM6.66667 6.66667C6.66667 4.825 8.15833 3.33333 10 3.33333C11.8417 3.33333 13.3333 4.825 13.3333 6.66667V9.16667H6.66667V6.66667Z'
                  fill='currentColor'
                >
                </path>
              </svg>
              <input
                type='password'
                placeholder='Confirmar contraseña'
                class='form-input'
                id='confirmPassword'
                required
                minlength='6'
              />
            </div>
          </div>

          <button type='submit' class='login-btn' id='registerBtn'>Crear Cuenta</button>
        </form>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ baseUrl: import.meta.env.BASE_URL }}>
  // Sistema de autenticación integrado
  class AuthManager {
    constructor() {
      this.usersKey = 'hermesUsers';
      this.sessionKey = 'hermesSession';
    }

    getUsers() {
      const users = localStorage.getItem(this.usersKey);
      return users ? JSON.parse(users) : [];
    }

    saveUsers(users) {
      localStorage.setItem(this.usersKey, JSON.stringify(users));
    }

    getCurrentSession() {
      const session = localStorage.getItem(this.sessionKey);
      return session ? JSON.parse(session) : null;
    }

    saveSession(session) {
      localStorage.setItem(this.sessionKey, JSON.stringify(session));
    }

    register(email, password) {
      const users = this.getUsers();

      if (users.find(user => user.email === email)) {
        return {
          success: false,
          error: 'Este email ya está registrado',
        };
      }

      const newUser = {
        id: Date.now(),
        email: email,
        password: password,
        isProfileComplete: false,
        createdAt: new Date().toISOString(),
        roles: {
          isStudent: true,
          isTutor: false,
          tutorStatus: null,
        },
        tutorProfile: null,
      };

      users.push(newUser);
      this.saveUsers(users);

      const session = {
        userId: newUser.id,
        email: newUser.email,
        isLoggedIn: true,
        loginAt: new Date().toISOString(),
      };
      this.saveSession(session);

      return {
        success: true,
        user: newUser,
        session: session,
      };
    }

    login(email, password) {
      const users = this.getUsers();
      const user = users.find(u => u.email === email && u.password === password);

      if (!user) {
        return {
          success: false,
          error: 'Email o contraseña incorrectos',
        };
      }

      const session = {
        userId: user.id,
        email: user.email,
        isLoggedIn: true,
        loginAt: new Date().toISOString(),
      };
      this.saveSession(session);

      return {
        success: true,
        user: user,
        session: session,
      };
    }

    logout() {
      localStorage.removeItem(this.sessionKey);
      return { success: true };
    }

    isLoggedIn() {
      const session = this.getCurrentSession();
      return session && session.isLoggedIn;
    }

    getCurrentUser() {
      const session = this.getCurrentSession();
      if (!session) return null;

      const users = this.getUsers();
      return users.find(user => user.id === session.userId) || null;
    }
  }

  // Crear instancia global
  window.auth = new AuthManager();

  // Inicializar usuarios demo (incluye tutor y estudiante)
  function initializeDemoUsers() {
    const users = window.auth.getUsers();

    console.log('Inicializando usuarios demo. Usuarios existentes:', users.length);

    // Verificar si ya existen los usuarios demo específicos
    const studentExists = users.find(u => u.email === 'juanc4@utec.edu.pe');
    const tutorExists = users.find(u => u.email === 'jorge.ramirez@utec.edu.pe');

    if (!studentExists || !tutorExists) {
      console.log('Creando usuarios demo...');

      const existingUsers = window.auth.getUsers();
      const allUsers = [...existingUsers];

      // Agregar tutor si no existe
      if (!tutorExists) {
        allUsers.push({
          id: 2,
          email: 'jorge.ramirez@utec.edu.pe',
          password: 'tutor123',
          isProfileComplete: true,
          createdAt: '2024-01-15T10:00:00.000Z',
          profile: {
            fullName: 'Jorge Ramírez Silva',
            university: 'Universidad de Ingeniería y Tecnología',
            universityId: 1,
            career: 'Ingeniería de Sistemas',
            semester: 8,
            phone: '+51 987654321',
            studentId: '201901234',
            completedAt: '2024-01-15T10:30:00.000Z',
          },
          roles: {
            isStudent: true,
            isTutor: true,
            tutorStatus: 'approved',
          },
          tutorProfile: {
            courses: [
              {
                courseId: 3,
                university: 'Universidad de Ingeniería y Tecnología',
                courseName: 'Estructuras de Datos',
                courseCode: 'CS2001',
                grade: 18,
                semester: '2023-2',
                isApproved: true,
                hourlyRate: 32,
                description: 'Algoritmos y estructuras de datos fundamentales.',
              },
            ],
            totalSessions: 45,
            rating: 4.8,
            description: 'Tutor especializado en Estructuras de Datos.',
            verificationStatus: 'verified',
            verifiedAt: '2024-01-15T10:30:00.000Z',
            availability: {
              monday: ['14:00-16:00', '18:00-20:00'],
              tuesday: ['16:00-18:00'],
              wednesday: ['14:00-16:00', '18:00-20:00'],
              thursday: ['16:00-18:00'],
              friday: ['14:00-17:00'],
              saturday: ['09:00-12:00'],
              sunday: [],
            },
          },
        });
      }

      // Agregar estudiante si no existe
      if (!studentExists) {
        allUsers.push({
          id: 1000,
          email: 'juanc4@utec.edu.pe',
          password: 'juanca123',
          isProfileComplete: true,
          createdAt: '2024-02-01T09:00:00.000Z',
          profile: {
            fullName: 'Juan Carlos Mendoza Rivera',
            university: 'Universidad de Ingeniería y Tecnología',
            universityId: 1,
            career: 'Ingeniería de Sistemas',
            semester: 4,
            phone: '+51 912345678',
            studentId: '202011567',
            learningGoals: 'Matemáticas, Programación, Estructuras de Datos',
            completedAt: '2024-02-01T09:30:00.000Z',
          },
          roles: {
            isStudent: true,
            isTutor: false,
            tutorStatus: null,
          },
          tutorProfile: null,
          scheduledTutorings: [
            {
              id: 'TUT001',
              tutorId: 2,
              tutorName: 'Jorge Ramírez Silva',
              courseId: 3,
              courseName: 'Estructuras de Datos',
              courseCode: 'CS2001',
              date: '2025-07-08',
              time: '14:00',
              duration: 60,
              price: 32,
              status: 'confirmed',
              sessionType: 'online',
              meetingLink: 'https://hermes-academy.com/room/TUT001',
              confirmedAt: '2025-07-02T10:00:00.000Z',
            },
            {
              id: 'TUT002',
              tutorId: 2,
              tutorName: 'Jorge Ramírez Silva',
              courseId: 3,
              courseName: 'Estructuras de Datos',
              courseCode: 'CS2001',
              date: '2025-07-10',
              time: '16:00',
              duration: 60,
              price: 32,
              status: 'confirmed',
              sessionType: 'online',
              meetingLink: 'https://hermes-academy.com/room/TUT002',
              confirmedAt: '2025-07-03T14:00:00.000Z',
            },
          ],
        });
      }

      window.auth.saveUsers(allUsers);
      console.log('Usuarios demo guardados correctamente. Total:', allUsers.length);

      // Crear notificaciones solo si no existen
      const existingNotifications = localStorage.getItem('hermesNotifications');
      if (!existingNotifications) {
        const notifications = [
          {
            id: 'NOT001',
            userId: 1000,
            type: 'tutoring_confirmed',
            title: 'Tutoría confirmada',
            message: 'Tu solicitud de tutoría para Estructuras de Datos con Jorge Ramírez ha sido aceptada',
            data: {
              tutorName: 'Jorge Ramírez Silva',
              courseName: 'Estructuras de Datos',
              date: '2025-07-08',
              time: '14:00',
              price: 32,
              sessionType: 'online',
            },
            isRead: false,
            createdAt: '2025-07-02T10:00:00.000Z',
          },
          {
            id: 'NOT002',
            userId: 1000,
            type: 'tutoring_confirmed',
            title: 'Tutoría confirmada',
            message: 'Tu solicitud de tutoría para Estructuras de Datos con Jorge Ramírez ha sido aceptada',
            data: {
              tutorName: 'Jorge Ramírez Silva',
              courseName: 'Estructuras de Datos',
              date: '2025-07-10',
              time: '16:00',
              price: 32,
              sessionType: 'online',
            },
            isRead: false,
            createdAt: '2025-07-03T14:00:00.000Z',
          },
          {
            id: 'NOT003',
            userId: 1000,
            type: 'counter_offer',
            title: 'Contraoferta recibida',
            message:
              'Jorge Ramírez te envió una contraoferta para Estructuras de Datos: S/. 30/hora (Tu oferta: S/. 25/hora)',
            data: {
              tutorName: 'Jorge Ramírez Silva',
              courseName: 'Estructuras de Datos',
              studentOfferedPrice: 25,
              tutorCounterPrice: 30,
              tutorOriginalRate: 32,
              message:
                'Hola! Vi tu solicitud para Estructuras de Datos. Te puedo ofrecer S/. 30 por hora. ¿Te parece bien?',
              requestId: 'REQ001',
              sessionDate: '2025-07-12',
              sessionTime: '15:00',
              duration: 60,
            },
            isRead: false,
            createdAt: '2025-07-04T08:30:00.000Z',
          },
        ];

        localStorage.setItem('hermesNotifications', JSON.stringify(notifications));
        console.log('Notificaciones demo creadas correctamente');
      }

      console.log('Usuario tutor Jorge y estudiante Juan Carlos creados correctamente');
    } else {
      console.log('Usuarios demo ya existen');
    }
  }

  // Inicializar usuarios demo al cargar
  initializeDemoUsers();

  let isLoginMode = true;

  // Alternar entre login y registro
  function toggleAuthMode() {
    const loginForm = document.querySelector('.login-form');
    const registerForm = document.getElementById('registerForm');
    const authToggleText = document.getElementById('authToggleText');
    const authToggleLink = document.getElementById('authToggleLink');

    if (isLoginMode) {
      // Mostrar formulario de registro
      loginForm.style.display = 'none';
      registerForm.style.display = 'flex';
      authToggleText.textContent = 'Already have an account?';
      authToggleLink.textContent = 'Login';
      isLoginMode = false;
    } else {
      // Mostrar formulario de login
      loginForm.style.display = 'flex';
      registerForm.style.display = 'none';
      authToggleText.textContent = "Don't have an account?";
      authToggleLink.textContent = 'Register';
      isLoginMode = true;
    }
  }

  // Obtener parámetro de redirección de la URL
  function getRedirectParam() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('redirect');
  }

  // Función para redireccionar según el parámetro
  function redirectAfterAuth(user) {
    const redirectParam = getRedirectParam();

    // Si no está completo el perfil, siempre ir a completar perfil primero
    if (!user.isProfileComplete) {
      window.location.href = baseUrl + '/complete-profile';
      return;
    }

    // Si hay parámetro de redirección, usarlo
    if (redirectParam === 'become-tutor') {
      window.location.href = baseUrl + '/become-tutor';
    } else if (redirectParam === 'dashboard') {
      window.location.href = baseUrl + '/dashboard';
    } else {
      // Por defecto ir al dashboard
      window.location.href = baseUrl + '/dashboard';
    }
  }

  // Manejar login
  function handleLogin(event) {
    event.preventDefault();

    // Asegurarse de que los usuarios demo existan antes del login
    initializeDemoUsers();

    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;

    console.log('Intentando login con:', email, password);
    console.log('Usuarios disponibles:', window.auth.getUsers());

    const result = window.auth.login(email, password);

    console.log('Resultado del login:', result);

    if (result.success) {
      alert('¡Inicio de sesión exitoso!');
      redirectAfterAuth(result.user);
    } else {
      alert(result.error);
    }
  }

  // Manejar registro
  function handleRegister(event) {
    event.preventDefault();

    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;

    // Validar que las contraseñas coincidan
    if (password !== confirmPassword) {
      alert('Las contraseñas no coinciden');
      return;
    }

    // Validar email universitario
    if (!email.includes('.edu.pe')) {
      alert('Debes usar un email universitario (.edu.pe)');
      return;
    }

    // Usar el sistema de autenticación real
    const result = window.auth.register(email, password);

    if (result.success) {
      alert('¡Cuenta creada exitosamente! Ahora completa tu perfil.');
      // Pasar el parámetro de redirección a complete-profile
      const redirectParam = getRedirectParam();
      if (redirectParam) {
        window.location.href = baseUrl + '/complete-profile?redirect=' + redirectParam;
      } else {
        window.location.href = baseUrl + '/complete-profile';
      }
    } else {
      alert(result.error);
    }
  }

  function togglePassword() {
    const passwordInput = document.getElementById('password');
    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
    passwordInput.setAttribute('type', type);
  }

  // Deshabilitar botones de redes sociales por ahora
  function loginWithGoogle() {
    alert('Login con Google estará disponible próximamente');
  }

  function loginWithGithub() {
    alert('Login con GitHub estará disponible próximamente');
  }

  // Verificar si ya está logueado al cargar la página
  document.addEventListener('DOMContentLoaded', function () {
    if (window.auth.isLoggedIn()) {
      const user = window.auth.getCurrentUser();
      if (user) {
        redirectAfterAuth(user);
      }
    }
  });

  // Hacer las funciones globales
  window.loginWithGoogle = loginWithGoogle;
  window.loginWithGithub = loginWithGithub;
  window.handleLogin = handleLogin;
  window.handleRegister = handleRegister;
  window.togglePassword = togglePassword;
  window.toggleAuthMode = toggleAuthMode;
</script>

<style>
  /* Reset body padding for auth page */
  :global(body) {
    padding-top: 0 !important;
    overflow: hidden;
  }

  .auth-main {
    height: 100vh;
    background: var(--bg-general);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem;
    overflow: hidden;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  .auth-container {
    width: 100%;
    max-width: 340px;
    height: auto;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .auth-card {
    background: var(--bg-principal);
    border-radius: var(--radius-xl);
    padding: 1.25rem;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--border-light);
    width: 100%;
    max-height: calc(100vh - 1.5rem);
    overflow: hidden;
    position: relative;
  }

  .auth-header {
    text-align: center;
    margin-bottom: 0.875rem;
  }

  .welcome-text {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 400;
    margin: 0 0 0.25rem 0;
  }

  .brand-text {
    font-size: 1.375rem;
    color: var(--color-primary);
    font-weight: 700;
    margin: 0;
  }

  .social-buttons {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 0.875rem;
  }

  .social-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.625rem;
    border: 1px solid var(--border-medium);
    border-radius: var(--radius-lg);
    background: var(--bg-principal);
    color: var(--text-primary);
    font-size: 0.8125rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .social-btn:hover {
    background: var(--bg-general);
    border-color: var(--border-dark);
  }

  .google-btn:hover {
    border-color: #4285f4;
  }

  .github-btn:hover {
    border-color: #333;
  }

  .divider {
    display: flex;
    align-items: center;
    margin: 0.875rem 0;
    color: var(--text-light);
    font-size: 0.8125rem;
  }

  .divider::before,
  .divider::after {
    content: '';
    flex: 1;
    height: 1px;
    background: var(--border-medium);
  }

  .divider span {
    padding: 0 0.75rem;
  }

  .login-form {
    display: flex;
    flex-direction: column;
    gap: 0.625rem;
  }

  .register-form {
    flex-direction: column;
    gap: 0.625rem;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .input-icon {
    position: absolute;
    left: 0.625rem;
    color: var(--text-light);
    z-index: 1;
  }

  .form-input {
    width: 100%;
    padding: 0.625rem 0.625rem 0.625rem 2.5rem;
    border: 1px solid var(--border-medium);
    border-radius: var(--radius-lg);
    background: var(--bg-general);
    color: var(--text-primary);
    font-size: 0.8125rem;
    outline: none;
    transition: all 0.2s ease;
  }

  .form-input:focus {
    border-color: var(--color-primary);
    background: var(--bg-principal);
    box-shadow: 0 0 0 2px var(--color-primary-light);
  }

  .toggle-password {
    position: absolute;
    right: 0.625rem;
    background: none;
    border: none;
    color: var(--text-light);
    cursor: pointer;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .toggle-password:hover {
    color: var(--text-secondary);
  }

  .form-options {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.8125rem;
    color: var(--text-secondary);
    cursor: pointer;
  }

  .checkbox-label input[type='checkbox'] {
    display: none;
  }

  .checkmark {
    width: 16px;
    height: 16px;
    border: 1px solid var(--border-medium);
    border-radius: var(--radius-sm);
    position: relative;
  }

  .checkbox-label input[type='checkbox']:checked + .checkmark {
    background: var(--color-primary);
    border-color: var(--color-primary);
  }

  .checkbox-label input[type='checkbox']:checked + .checkmark::after {
    content: '✓';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 10px;
  }

  .forgot-link {
    font-size: 0.8125rem;
    color: var(--color-primary);
    text-decoration: none;
  }

  .forgot-link:hover {
    text-decoration: underline;
  }

  .login-btn {
    width: 100%;
    padding: 0.625rem;
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: var(--radius-lg);
    font-size: 0.8125rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .login-btn:hover {
    background: var(--color-primary-dark);
  }

  .register-link {
    text-align: center;
    margin-top: 0.625rem;
    font-size: 0.8125rem;
    color: var(--text-secondary);
  }

  .register-link a {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .register-link a:hover {
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .auth-main {
      padding: 0.5rem;
    }

    .auth-card {
      padding: 1rem;
    }

    .welcome-text {
      font-size: 0.75rem;
    }

    .brand-text {
      font-size: 1.25rem;
    }
  }
</style>
